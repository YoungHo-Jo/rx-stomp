var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/StompConfig.html",[0,0.246,1,1.157]],["body/classes/StompConfig.html",[0,0.276,1,1.301,2,1.067,3,0.917,4,0.675,5,1.777,6,1.067,7,3.174,8,1.771,9,3.191,10,0.958,11,1.646,12,0.675,13,1.771,14,2.458,15,1.806,16,3.191,17,3.191,18,3.191,19,2.904,20,2.432,21,1.33,22,0.061,23,2.102,24,2.236,25,2.522,26,1.301,27,2.241,28,2.236,29,2.665,30,2.092,31,2.522,32,1.858,33,2.522,34,3.174,35,3.174,36,1.515,37,3.174,38,2.522,39,2.647,40,4.711,41,2.236,42,3.174,43,3.191,44,3.191,45,3.5,46,2.102,47,3.679,48,3.679,49,2.102,50,2.236,51,3.174,52,2.522,53,2.522,54,2.647,55,2.236,56,1.771,57,2.522,58,1.771,59,1.771,60,1.771,61,2.522,62,2.092,63,2.236,64,1.515,65,1.118,66,3.174,67,0.958,68,1.301,69,1.515,70,2.092,71,1.415,72,3.174,73,1.301,74,1.301,75,1.771,76,2.522,77,3.174,78,1.301,79,1.515,80,1.646,81,2.092,82,2.092,83,2.092,84,2.092,85,1.515,86,2.522,87,0.917,88,1.067,89,0.917,90,0.036,91,0.036]],["title/classes/StompRPCConfig.html",[0,0.246,92,1.574]],["body/classes/StompRPCConfig.html",[0,0.353,2,1.54,3,1.323,4,0.975,6,1.54,10,0.975,12,0.975,13,2.265,21,1.341,22,0.06,23,1.937,32,1.91,67,0.975,71,1.564,74,1.664,87,1.82,88,1.54,89,1.664,90,0.046,91,0.046,92,2.265,93,1.82,94,2.128,95,2.265,96,2.265,97,1.564,98,2.477,99,2.223,100,3.814,101,3.701,102,3.228,103,1.43,104,3.071,105,2.223,106,3.071,107,3.228,108,1.937,109,1.801,110,1.323,111,1.43,112,2.128]],["title/classes/StompRPCService.html",[0,0.246,113,1.574]],["body/classes/StompRPCService.html",[0,0.272,2,1.046,3,0.898,4,0.662,6,1.046,10,0.945,12,0.662,15,1.847,21,1.102,22,0.061,23,1.741,27,2.513,32,1.993,49,1.046,65,1.102,67,0.945,70,2.623,71,1.102,73,0.898,78,1.496,80,1.847,84,2.062,87,1.794,88,1.046,89,0.898,90,0.035,91,0.035,92,2.57,93,1.631,95,2.616,97,1.623,98,2.22,99,1.741,103,1.286,104,2.062,106,2.062,108,2.088,109,1.223,110,1.794,111,1.402,112,1.445,113,1.746,114,1.741,115,1.746,116,1.493,117,0.945,118,1.746,119,2.884,120,2.22,121,1.223,122,2.192,123,2.192,124,1.493,125,3.129,126,3.129,127,4.606,128,2.192,129,2.623,130,2.008,131,3.129,132,3.129,133,2.192,134,2.062,135,1.046,136,2.062,137,1.741,138,1.445,139,1.741,140,2.192,141,3.98,142,3.98,143,2.623,144,2.623,145,3.98,146,3.162,147,2.192,148,1.741,149,2.192,150,2.192,151,2.192,152,2.192,153,2.192,154,3.129,155,3.129,156,3.129,157,2.192,158,2.192,159,1.445,160,2.192,161,2.192,162,3.129,163,2.192,164,2.192,165,1.741,166,2.192,167,3.129,168,1.223,169,2.899,170,2.192,171,2.192,172,1.741,173,2.486,174,2.192,175,2.192,176,1.223,177,2.192,178,2.192,179,2.192,180,1.741,181,2.192]],["title/classes/StompRService.html",[0,0.246,111,0.994]],["body/classes/StompRService.html",[0,0.188,1,0.738,2,0.367,3,0.315,4,0.232,6,0.367,8,1.729,10,0.653,11,1.956,12,0.232,13,1.207,14,1.372,15,1.736,19,0.507,20,0.888,21,1.123,22,0.061,23,2.041,26,1.524,27,1.816,29,0.752,32,1.648,36,1.174,46,1.554,49,1.853,56,0.752,58,1.004,59,1.372,60,1.816,64,1.619,65,0.762,67,1.417,68,1.696,71,0.634,73,1.524,74,0.315,75,0.752,78,0.886,79,1.479,80,1.786,85,1.174,87,1.11,88,0.367,89,0.315,90,0.015,91,0.015,93,1.77,96,0.752,97,0.475,99,1.032,103,0.954,105,1.853,108,2.041,109,0.752,110,1.978,111,0.475,115,0.429,116,1.032,117,1.173,118,1.729,119,3.125,120,0.752,121,1.372,124,0.643,130,0.643,135,0.643,136,2.043,137,1.071,138,0.507,139,0.611,146,1.43,165,0.611,168,1.004,176,1.628,180,0.611,182,0.611,183,1.348,184,1.718,185,1.196,186,1.348,187,1.348,188,1.348,189,1.954,190,2.792,191,2.508,192,0.888,193,1.207,194,1.071,195,0.888,196,1.425,197,1.071,198,1.071,199,0.643,200,3.462,201,1.718,202,1.718,203,1.718,204,2.696,205,1.718,206,1.718,207,2.451,208,1.718,209,2.146,210,1.718,211,1.718,212,1.425,213,1.718,214,1.718,215,1.718,216,1.071,217,1.348,218,1.348,219,1.071,220,0.752,221,0.769,222,3.086,223,1.954,224,1.718,225,1.207,226,1.032,227,0.888,228,1.071,229,1.718,230,1.621,231,2.462,232,1.718,233,1.071,234,1.071,235,1.954,236,1.718,237,3.399,238,1.071,239,1.071,240,0.769,241,2.696,242,1.207,243,1.071,244,1.071,245,1.071,246,1.071,247,1.071,248,1.071,249,2.607,250,0.769,251,2.462,252,2.607,253,1.43,254,1.071,255,1.718,256,1.071,257,0.769,258,1.43,259,1.071,260,0.769,261,0.752,262,1.071,263,1.071,264,1.718,265,2.587,266,0.769,267,2.319,268,0.769,269,0.643,270,1.718,271,1.071,272,0.888,273,0.888,274,2.319,275,0.769,276,1.954,277,1.718,278,1.071,279,1.071,280,0.769,281,1.718,282,0.769,283,0.888,284,1.071,285,1.621,286,0.769,287,0.769,288,0.769,289,1.071,290,0.769,291,0.888,292,1.071,293,0.859,294,2.878,295,0.769,296,0.769,297,0.888,298,1.071,299,0.769,300,1.071,301,0.769,302,1.004,303,0.888,304,1.372,305,1.071,306,1.071,307,1.071,308,1.071,309,1.718,310,1.071,311,0.888,312,0.752,313,1.071,314,0.954,315,1.071,316,1.071,317,1.071,318,1.186,319,0.888,320,0.888,321,1.071,322,1.071,323,0.769,324,1.071,325,0.888,326,0.611,327,0.769,328,0.769,329,0.769,330,0.611,331,2.163,332,1.43,333,0.769,334,0.769,335,0.769,336,0.769,337,1.348,338,0.769,339,0.769,340,0.769,341,0.769,342,0.769,343,0.769,344,0.769,345,0.769,346,0.769,347,0.769,348,1.348,349,0.769,350,0.769,351,0.769,352,0.769,353,0.769,354,0.769,355,0.611,356,0.769,357,0.769,358,1.8,359,0.769,360,0.769,361,0.611,362,0.611,363,0.769,364,0.769,365,0.769,366,0.769,367,0.769,368,0.769,369,0.769,370,1.348,371,0.769,372,0.769,373,0.769,374,0.769,375,0.769,376,1.8,377,0.769,378,0.769,379,0.769,380,0.769,381,0.769,382,0.769,383,1.348,384,0.769,385,0.769,386,0.769,387,0.611,388,0.769,389,0.769,390,0.769,391,0.769,392,0.769,393,1.348,394,2.46,395,0.769,396,0.769,397,0.769,398,0.769,399,0.769,400,1.348,401,1.8,402,0.611,403,0.769,404,0.769,405,0.769,406,0.769,407,0.611,408,0.769,409,0.769,410,0.769,411,0.769,412,0.769,413,0.769,414,0.769,415,0.769,416,0.769,417,1.348,418,0.769,419,0.611,420,1.348,421,0.769,422,0.611,423,0.507,424,0.611,425,0.769,426,0.769,427,1.348,428,0.769,429,0.769,430,0.611,431,0.769,432,0.611,433,1.43,434,1.348,435,0.769,436,0.769,437,0.769,438,0.769,439,0.611,440,0.769,441,0.769,442,0.769,443,0.769,444,0.769,445,0.367,446,1.348,447,0.769,448,0.769,449,0.769,450,0.769,451,0.769,452,0.769,453,0.769,454,0.769,455,0.769,456,0.769,457,0.769,458,0.769,459,0.769,460,0.769,461,0.769,462,0.769,463,0.769,464,0.769,465,0.769]],["title/classes/StompService.html",[0,0.246,10,0.852]],["body/classes/StompService.html",[0,0.203,1,1.34,2,0.707,3,0.608,4,0.448,6,1.113,8,1.609,10,0.871,11,1.935,12,0.448,13,1.301,14,1.609,15,1.619,20,0.977,21,1.385,22,0.06,23,2.312,26,1.619,27,1.824,29,0.827,32,1.725,36,0.707,46,1.113,49,2.008,56,0.827,58,0.827,59,0.827,60,1.609,64,1.696,65,0.822,67,1.413,68,1.725,71,1.016,73,1.677,75,0.827,78,1.34,79,1.376,80,1.857,87,0.956,89,0.608,90,0.026,91,0.026,96,1.301,97,0.822,99,1.56,103,1.253,105,1.885,108,1.952,110,1.9,111,1.732,112,0.977,116,1.56,117,1.236,118,1.824,119,3.265,120,0.827,121,1.609,124,0.707,130,0.707,135,1.113,136,1.537,176,1.301,184,2.291,185,0.608,189,1.178,190,2.824,191,2.155,192,0.977,193,1.301,194,1.178,195,0.977,196,1.537,197,1.178,198,1.178,200,3.718,201,2.291,202,2.291,203,2.291,204,2.291,205,2.291,206,2.291,207,2.343,208,2.291,209,2.155,210,2.291,211,2.291,212,1.9,213,2.291,214,2.291,215,2.291,216,1.853,219,1.853,220,1.301,222,2.999,223,1.853,224,1.853,225,1.301,226,1.376,227,0.977,228,1.178,229,1.853,230,1.537,231,2.291,232,1.853,233,1.178,234,1.178,235,1.178,236,1.853,237,3.423,238,1.178,239,1.178,241,2.597,242,1.301,243,1.178,244,1.178,245,1.178,246,1.178,247,1.178,248,1.178,249,2.603,251,2.597,252,2.343,253,1.178,254,1.178,255,1.853,256,1.178,258,1.178,259,1.853,261,0.827,262,1.178,263,1.178,264,1.853,265,2.597,267,2.291,269,0.707,270,1.853,271,1.178,272,0.977,273,0.977,274,2.291,276,1.853,277,1.853,278,1.178,279,1.178,281,1.853,283,0.977,284,1.178,285,1.537,289,1.178,291,0.977,292,1.178,293,0.707,294,1.853,297,0.977,298,1.178,300,1.178,302,0.827,303,0.977,304,1.301,305,1.178,306,1.178,307,1.178,308,1.178,309,1.853,310,1.178,311,0.977,312,0.827,313,1.178,314,0.822,315,1.178,316,1.178,317,1.178,318,0.977,319,0.977,320,0.977,321,1.178,322,1.178,324,1.178,325,0.977,326,1.178,330,1.178,466,1.178,467,2.332,468,2.332,469,1.482,470,4.819,471,1.482,472,1.482,473,1.482,474,1.482,475,1.482,476,1.482,477,1.482,478,1.482,479,1.482,480,1.482,481,1.482,482,1.482,483,1.482,484,1.482,485,1.482,486,1.482,487,1.482,488,1.482,489,1.482,490,1.482,491,1.178,492,1.178,493,1.482,494,1.482,495,1.482]],["title/coverage.html",[496,2.957]],["body/coverage.html",[0,0.435,1,1.524,4,1.123,5,2.954,10,1.123,21,1.123,22,0.058,69,1.774,85,1.774,90,0.05,91,0.05,92,2.075,93,1.937,94,2.451,111,1.31,113,2.075,114,2.954,182,2.954,466,2.954,496,2.954,497,3.719,498,3.719,499,4.997,500,4.426,501,3.719,502,3.719,503,3.719,504,3.719,505,3.719]],["title/dependencies.html",[199,1.602,506,1.597]],["body/dependencies.html",[22,0.057,88,1.933,90,0.053,91,0.053,134,2.669,135,1.933,199,1.933,507,4.051,508,4.051]],["title/miscellaneous/enumerations.html",[509,1.352,510,2.667]],["body/miscellaneous/enumerations.html",[11,1.622,12,1.195,22,0.052,67,1.195,90,0.052,91,0.052,93,1.622,116,1.888,207,2.608,209,2.608,332,3.647,387,3.144,402,3.144,509,2.208,510,3.144,511,3.144,512,4.591,513,3.144]],["title/index.html",[12,0.732,293,1.156,514,1.597]],["body/index.html",[21,1.011,22,0.051,26,1.372,65,1.463,67,1.254,82,2.737,90,0.047,91,0.047,108,1.597,109,2.317,117,1.011,185,1.372,192,2.206,193,2.317,269,2.154,304,1.868,311,2.206,314,1.179,325,2.737,355,3.299,445,1.597,491,2.659,506,2.206,515,3.348,516,3.348,517,2.206,518,3.348,519,2.659,520,3.348,521,3.348,522,2.975,523,4.152,524,3.348,525,2.737,526,3.586,527,3.299,528,2.659,529,2.206,530,3.348,531,3.348,532,3.348,533,4.152,534,2.206,535,2.206,536,3.348,537,2.317,538,2.317,539,4.152,540,2.975,541,2.659,542,3.348,543,3.348,544,3.348,545,3.348,546,3.348,547,2.659,548,2.659,549,3.348,550,3.348,551,3.348,552,3.348,553,3.348,554,2.659,555,3.348,556,2.975,557,2.659]],["title/license.html",[293,1.156,514,1.597,556,1.597]],["body/license.html",[4,1,11,1.357,22,0.047,69,1.58,90,0.047,91,0.047,117,1.245,212,2.182,225,1.848,249,2.182,269,1.58,272,2.182,285,2.182,527,3.569,529,2.182,541,2.631,547,2.631,548,2.631,556,2.182,557,2.631,558,4.492,559,3.312,560,2.631,561,4.125,562,3.312,563,3.312,564,3.312,565,3.312,566,4.125,567,3.312,568,3.735,569,5.098,570,3.312,571,4.125,572,4.492,573,3.312,574,3.277,575,3.312,576,3.312,577,3.312,578,3.312,579,3.312,580,3.312,581,3.312,582,3.312,583,2.182,584,3.312,585,2.631,586,4.125,587,4.125,588,3.312,589,3.312,590,4.125,591,3.312,592,3.312,593,3.312,594,3.312,595,3.312,596,3.312,597,3.312,598,3.312,599,3.312,600,3.312,601,3.312,602,3.312,603,3.312,604,3.312,605,3.312,606,3.312,607,3.312,608,3.312]],["title/modules.html",[609,2.076]],["body/modules.html",[22,0.053,90,0.053,91,0.053,609,2.302]],["title/overview.html",[610,2.957]],["body/overview.html",[0,0.357,22,0.053,62,2.705,90,0.053,91,0.053,610,3.261]],["title/miscellaneous/typealiases.html",[509,1.352,611,3.358]],["body/miscellaneous/typealiases.html",[12,1.201,21,1.201,22,0.052,71,1.401,79,1.898,90,0.052,91,0.052,93,1.63,94,3.035,97,1.401,98,2.219,106,3.203,509,2.219,511,3.16,612,3.978]],["title/additional-documentation/remote-procedure-call-(rpc).html",[95,0.949,143,1.121,144,1.121,302,0.949,613,0.812,614,0.812]],["body/additional-documentation/remote-procedure-call-(rpc).html",[0,0.201,10,0.98,15,1.538,22,0.059,26,1.669,32,0.945,36,1.548,39,2.473,54,1.52,64,1.548,68,1.669,69,1.101,70,1.52,74,0.945,78,0.945,80,0.945,81,2.138,90,0.037,91,0.043,95,1.81,96,1.287,97,0.813,99,1.548,100,2.577,101,1.832,103,1.143,104,2.473,105,2.047,110,1.824,111,1.322,113,1.81,115,1.81,116,1.101,117,1.296,118,1.287,120,1.81,121,1.287,124,1.791,129,1.52,130,2.123,134,1.52,135,1.101,143,1.52,144,1.52,148,2.577,159,2.138,168,2.604,169,2.577,172,1.832,173,3.409,176,1.287,185,1.759,191,1.52,196,1.52,199,1.943,220,1.287,226,1.101,230,1.52,273,3.127,291,1.52,297,1.52,302,1.81,312,1.81,314,1.435,320,2.138,407,2.577,419,1.832,422,1.832,423,2.138,424,1.832,430,1.832,432,1.832,433,1.832,445,1.101,492,1.832,554,1.832,583,1.52,585,1.832,609,1.287,613,1.548,615,1.832,616,2.307,617,2.307,618,1.832,619,2.307,620,2.307,621,2.307,622,4.072,623,3.244,624,2.307,625,4.072,626,3.753,627,2.307,628,2.307,629,2.307,630,2.307,631,2.307,632,2.307,633,1.832,634,2.577,635,3.244,636,3.244,637,3.244,638,2.307,639,3.753,640,2.307,641,3.244,642,2.307,643,2.307,644,2.307,645,3.244,646,2.307,647,3.244,648,1.832,649,2.307,650,1.52,651,2.307,652,2.307,653,1.832,654,2.307,655,1.832,656,2.307,657,2.307,658,2.307,659,3.244,660,3.244,661,2.307,662,2.307,663,3.244,664,2.307,665,2.307,666,2.307,667,2.307,668,2.307,669,2.307,670,2.307,671,2.307,672,2.307,673,2.307,674,2.307,675,1.832,676,2.307,677,2.307,678,2.307,679,2.307,680,2.307,681,2.307,682,3.244,683,2.307,684,2.307,685,1.832,686,2.307,687,2.307,688,2.307,689,2.307,690,2.307,691,2.307,692,3.244,693,2.307,694,2.307,695,2.307,696,2.307,697,2.307,698,2.307,699,1.832]],["title/additional-documentation/sockjs-support.html",[83,1.399,613,1.013,614,1.013,650,1.399]],["body/additional-documentation/sockjs-support.html",[0,0.223,1,1.745,9,2.033,11,1.049,14,1.428,15,1.429,16,2.033,17,2.033,18,2.033,19,2.806,22,0.059,26,1.429,29,2.485,30,1.687,31,2.77,33,2.77,36,1.663,38,2.033,43,2.033,44,2.033,45,2.77,46,1.663,47,3.382,48,3.15,49,1.892,52,2.77,53,2.033,54,2.298,56,1.428,57,2.033,58,1.428,59,1.945,60,1.945,61,2.77,62,1.687,64,1.221,65,1.228,68,1.049,71,0.902,73,1.049,78,1.049,79,2.031,80,1.429,81,1.687,82,2.806,83,3.364,84,1.687,85,1.221,86,2.033,87,1.049,89,1.049,90,0.04,91,0.04,97,0.902,103,0.902,115,1.428,117,1.345,124,1.221,159,2.298,168,1.428,185,1.429,193,2.375,220,1.428,226,1.221,227,1.687,242,1.945,261,1.428,283,1.687,303,1.687,304,1.428,312,1.428,314,0.902,361,2.033,362,2.033,445,1.663,513,2.033,517,1.687,519,2.033,522,1.687,525,1.687,528,2.033,534,1.687,535,2.298,538,1.428,568,2.033,574,2.77,615,2.033,618,2.033,650,2.936,653,2.033,655,2.033,685,2.033,699,2.77,700,2.559,701,2.033,702,2.559,703,2.559,704,2.559,705,2.559,706,2.559,707,3.486,708,2.559,709,2.559,710,4.257,711,2.559,712,2.559,713,2.559,714,3.486,715,3.486,716,3.486,717,3.486,718,2.559,719,2.559,720,2.559,721,2.559,722,3.486,723,2.559,724,2.559,725,2.559,726,2.559,727,2.559,728,2.559,729,3.486,730,3.486,731,2.559,732,2.559,733,2.77,734,2.77,735,2.559,736,2.559,737,2.559]],["title/additional-documentation/change-log.html",[537,1.184,538,1.184,613,1.013,614,1.013]],["body/additional-documentation/change-log.html",[22,0.052,74,1.622,90,0.052,91,0.052,225,2.208,314,1.394,522,2.608,537,2.208,538,2.208,560,3.144,701,3.144,738,3.957,739,3.957,740,3.957,741,3.957,742,3.957,743,3.957,744,3.957,745,3.957,746,3.957]],["title/additional-documentation/how-to-contribute.html",[540,1.597,613,1.156,614,1.156]],["body/additional-documentation/how-to-contribute.html",[3,1.257,4,0.644,8,1.189,22,0.059,25,1.693,30,1.405,39,2.944,46,1.463,65,1.081,67,1.085,68,1.473,69,1.875,73,1.473,74,1.473,75,2.778,76,1.693,85,1.017,90,0.035,91,0.035,98,1.189,103,0.751,105,1.017,110,0.874,117,1.485,129,1.405,130,1.017,138,1.405,185,1.473,195,1.405,199,1.463,226,1.017,242,1.189,252,1.405,261,1.711,269,1.017,293,1.017,314,0.751,318,1.405,319,2.021,423,2.021,439,1.693,445,1.875,506,2.021,514,1.405,517,2.368,525,2.368,526,2.436,529,1.405,534,3.187,535,2.021,537,1.711,540,2.021,583,2.021,609,1.189,614,1.017,633,1.693,634,3.445,648,1.693,675,1.693,733,1.693,734,3.906,747,2.131,748,2.131,749,2.131,750,2.131,751,3.067,752,3.067,753,2.131,754,2.131,755,3.067,756,2.131,757,2.131,758,2.131,759,2.131,760,2.131,761,3.593,762,2.131,763,3.593,764,2.131,765,2.131,766,3.067,767,4.836,768,2.131,769,3.929,770,3.067,771,2.131,772,2.131,773,2.131,774,2.131,775,2.131,776,2.131,777,2.131,778,2.131,779,2.131,780,2.131,781,3.067,782,3.929,783,2.131,784,2.131,785,2.131,786,2.131,787,2.131,788,2.131,789,2.131,790,2.131,791,2.131,792,3.067,793,2.131,794,4.336,795,4.657,796,2.131,797,3.067,798,2.131,799,3.067,800,2.131,801,2.131,802,2.131,803,2.131,804,3.067,805,3.593,806,2.131,807,2.131,808,3.593,809,3.067,810,2.131,811,2.131,812,2.131,813,2.131,814,2.131,815,2.131,816,2.131,817,3.067,818,3.067,819,2.131,820,2.131,821,2.131,822,3.067,823,2.131,824,2.131,825,2.131,826,2.131,827,3.067,828,2.131,829,2.131,830,2.131,831,2.131,832,2.131,833,2.131,834,2.131,835,2.131,836,2.131,837,2.131,838,2.131,839,2.131,840,2.131,841,2.131,842,2.131,843,2.131,844,2.131,845,2.131,846,2.131,847,2.131,848,2.131,849,2.131,850,3.067,851,2.131,852,2.131,853,2.131,854,2.131,855,2.131]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}}}],["0",{"_index":47,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["0.1.0",{"_index":738,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["1.1.1",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":740,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["100",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":741,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["15674:15674",{"_index":830,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["20",{"_index":53,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["20000",{"_index":52,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["2018",{"_index":560,"title":{},"body":{"license.html":{},"additional-documentation/change-log.html":{}}}],["22/22",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":62,"title":{},"body":{"classes/StompConfig.html":{},"overview.html":{},"additional-documentation/sockjs-support.html":{}}}],["5.0.0",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["5000",{"_index":61,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["7/7",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["_changestate(st",{"_index":464,"title":{},"body":{"classes/StompRService.html":{}}}],["_config",{"_index":334,"title":{},"body":{"classes/StompRService.html":{}}}],["_repliesobserv",{"_index":152,"title":{},"body":{"classes/StompRPCService.html":{}}}],["_replyqueuenam",{"_index":147,"title":{},"body":{"classes/StompRPCService.html":{}}}],["_serverheadersbehavioursubject",{"_index":333,"title":{},"body":{"classes/StompRService.html":{}}}],["_setupreplyqueu",{"_index":150,"title":{},"body":{"classes/StompRPCService.html":{}}}],["abov",{"_index":585,"title":{},"body":{"license.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["accept",{"_index":666,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["access",{"_index":684,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["accessor",{"_index":217,"title":{},"body":{"classes/StompRService.html":{}}}],["account",{"_index":784,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["ack",{"_index":309,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["acknowledg",{"_index":426,"title":{},"body":{"classes/StompRService.html":{}}}],["action",{"_index":605,"title":{},"body":{"license.html":{}}}],["activ",{"_index":413,"title":{},"body":{"classes/StompRService.html":{}}}],["actual",{"_index":418,"title":{},"body":{"classes/StompRService.html":{}}}],["ad",{"_index":692,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["addit",{"_index":613,"title":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["addition",{"_index":271,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["adjust",{"_index":732,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["advanc",{"_index":188,"title":{},"body":{"classes/StompRService.html":{}}}],["affect",{"_index":737,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["ajax",{"_index":673,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["alias",{"_index":612,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":736,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["alreadi",{"_index":230,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["altern",{"_index":77,"title":{},"body":{"classes/StompConfig.html":{}}}],["alway",{"_index":234,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["and/or",{"_index":579,"title":{},"body":{"license.html":{}}}],["angular",{"_index":660,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["angular2",{"_index":135,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"dependencies.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["anoth",{"_index":676,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["apart",{"_index":697,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["api",{"_index":759,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["applic",{"_index":519,"title":{},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{}}}],["approach",{"_index":631,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["arg",{"_index":236,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["argument",{"_index":663,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["aris",{"_index":608,"title":{},"body":{"license.html":{}}}],["around",{"_index":735,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["array",{"_index":262,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["articl",{"_index":451,"title":{},"body":{"classes/StompRService.html":{}}}],["artifact",{"_index":834,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["associ",{"_index":570,"title":{},"body":{"license.html":{}}}],["astha",{"_index":549,"title":{},"body":{"index.html":{}}}],["asynchron",{"_index":197,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["attempt",{"_index":58,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["author",{"_index":541,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":59,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["automat",{"_index":307,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["awar",{"_index":753,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["back",{"_index":622,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["backend",{"_index":635,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["beat",{"_index":362,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/sockjs-support.html":{}}}],["beautifulli",{"_index":410,"title":{},"body":{"classes/StompRService.html":{}}}],["befor",{"_index":57,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["behaviorsubject",{"_index":274,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["behaviorsubject(nul",{"_index":344,"title":{},"body":{"classes/StompRService.html":{}}}],["behaviorsubject(stompstate.clos",{"_index":336,"title":{},"body":{"classes/StompRService.html":{}}}],["behavioursubject",{"_index":420,"title":{},"body":{"classes/StompRService.html":{}}}],["believ",{"_index":654,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["beta.1",{"_index":739,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["bin",{"_index":789,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["binari",{"_index":822,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["bodi",{"_index":397,"title":{},"body":{"classes/StompRService.html":{}}}],["boolean",{"_index":20,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["both",{"_index":808,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["branch",{"_index":843,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["broker",{"_index":68,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["browser",{"_index":517,"title":{},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["browsersbas",{"_index":841,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["btw",{"_index":691,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["build",{"_index":767,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["build/test/doc",{"_index":744,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["built",{"_index":833,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["bundl",{"_index":793,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["c",{"_index":559,"title":{},"body":{"license.html":{}}}],["call",{"_index":302,"title":{"additional-documentation/remote-procedure-call-(rpc).html":{}},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["call.html",{"_index":145,"title":{},"body":{"classes/StompRPCService.html":{}}}],["callback",{"_index":241,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["caller",{"_index":421,"title":{},"body":{"classes/StompRService.html":{}}}],["carri",{"_index":224,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["case",{"_index":634,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["caus",{"_index":847,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["caution",{"_index":845,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["chang",{"_index":537,"title":{"additional-documentation/change-log.html":{}},"body":{"index.html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}}}],["charalampidi",{"_index":546,"title":{},"body":{"index.html":{}}}],["charg",{"_index":565,"title":{},"body":{"license.html":{}}}],["check",{"_index":655,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["checkout",{"_index":781,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["chrome",{"_index":809,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["claim",{"_index":601,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"overview.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["clean",{"_index":831,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["cleanup",{"_index":180,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{}}}],["client",{"_index":26,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["client';impl",{"_index":719,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["close",{"_index":387,"title":{},"body":{"classes/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["closur",{"_index":431,"title":{},"body":{"classes/StompRService.html":{}}}],["code",{"_index":445,"title":{},"body":{"classes/StompRService.html":{},"index.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["cold",{"_index":454,"title":{},"body":{"classes/StompRService.html":{}}}],["coldobserv",{"_index":428,"title":{},"body":{"classes/StompRService.html":{}}}],["coldobservable.pipe(shar",{"_index":456,"title":{},"body":{"classes/StompRService.html":{}}}],["come",{"_index":532,"title":{},"body":{"index.html":{}}}],["commun",{"_index":618,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["compat",{"_index":706,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["complet",{"_index":727,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["complic",{"_index":409,"title":{},"body":{"classes/StompRService.html":{}}}],["compodoc",{"_index":758,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["comput",{"_index":644,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["concept",{"_index":686,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["condit",{"_index":584,"title":{},"body":{"license.html":{}}}],["config",{"_index":96,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["config(valu",{"_index":350,"title":{},"body":{"classes/StompRService.html":{}}}],["configur",{"_index":8,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["connect",{"_index":11,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"additional-documentation/sockjs-support.html":{}}}],["connecthead",{"_index":384,"title":{},"body":{"classes/StompRService.html":{}}}],["connectobserv",{"_index":201,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["consol",{"_index":725,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["console.log(message.bodi",{"_index":672,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["console.log(new",{"_index":238,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["const",{"_index":168,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["constructor",{"_index":121,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["constructor(config",{"_index":468,"title":{},"body":{"classes/StompService.html":{}}}],["constructor(priv",{"_index":153,"title":{},"body":{"classes/StompRPCService.html":{}}}],["constructor(stompservic",{"_index":122,"title":{},"body":{"classes/StompRPCService.html":{}}}],["consum",{"_index":671,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["contract",{"_index":606,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":540,"title":{"additional-documentation/how-to-contribute.html":{}},"body":{"index.html":{},"additional-documentation/how-to-contribute.html":{}}}],["control",{"_index":775,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["convent",{"_index":616,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["convert",{"_index":443,"title":{},"body":{"classes/StompRService.html":{}}}],["copi",{"_index":568,"title":{},"body":{"license.html":{},"additional-documentation/sockjs-support.html":{}}}],["copyright",{"_index":558,"title":{},"body":{"license.html":{}}}],["correct",{"_index":623,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["correl",{"_index":625,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["correlationid",{"_index":169,"title":{},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["coverag",{"_index":496,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":124,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["current",{"_index":276,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["currentst",{"_index":340,"title":{},"body":{"classes/StompRService.html":{}}}],["custom",{"_index":696,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["d",{"_index":828,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["damag",{"_index":602,"title":{},"body":{"license.html":{}}}],["date",{"_index":239,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["deal",{"_index":571,"title":{},"body":{"license.html":{}}}],["debug",{"_index":14,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["deep",{"_index":550,"title":{},"body":{"index.html":{}}}],["deepak",{"_index":547,"title":{},"body":{"index.html":{},"license.html":{}}}],["default",{"_index":73,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["defaultmessagesobserv",{"_index":202,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["defaultmessagessubscript",{"_index":167,"title":{},"body":{"classes/StompRPCService.html":{}}}],["defaultmessagessubscription.unsubscrib",{"_index":181,"title":{},"body":{"classes/StompRPCService.html":{}}}],["defin",{"_index":23,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["definit",{"_index":533,"title":{},"body":{"index.html":{}}}],["deliv",{"_index":298,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["demo/tree/sockj",{"_index":702,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["depend",{"_index":199,"title":{"dependencies.html":{}},"body":{"classes/StompRService.html":{},"dependencies.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["deriv",{"_index":664,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["design",{"_index":321,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["destin",{"_index":291,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["detail",{"_index":70,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["develop",{"_index":525,"title":{},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["diagnost",{"_index":724,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["differ",{"_index":750,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["dimitri",{"_index":545,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":48,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["disconnect",{"_index":209,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["distribut",{"_index":529,"title":{},"body":{"index.html":{},"license.html":{},"additional-documentation/how-to-contribute.html":{}}}],["doc",{"_index":795,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["docker",{"_index":805,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["dockerfil",{"_index":804,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["document",{"_index":69,"title":{},"body":{"classes/StompConfig.html":{},"coverage.html":{},"license.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["documentation/rpc",{"_index":142,"title":{},"body":{"classes/StompRPCService.html":{}}}],["don't",{"_index":653,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["drop",{"_index":305,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["dure",{"_index":318,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["echo",{"_index":648,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["edit",{"_index":814,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["edit/writ",{"_index":747,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["emit",{"_index":251,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["emul",{"_index":726,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["enabl",{"_index":25,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/how-to-contribute.html":{}}}],["end",{"_index":279,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["endpoint",{"_index":632,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["enumer",{"_index":510,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":751,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["equal",{"_index":658,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["error",{"_index":281,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["es5",{"_index":799,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["es6",{"_index":195,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["esm5",{"_index":798,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["establish",{"_index":223,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["etc/rabbitmq/rabbitmq.conf",{"_index":824,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["even",{"_index":303,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["event",{"_index":272,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"license.html":{}}}],["everyon",{"_index":553,"title":{},"body":{"index.html":{}}}],["exampl",{"_index":71,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/sockjs-support.html":{}}}],["expect",{"_index":659,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["explanatori",{"_index":450,"title":{},"body":{"classes/StompRService.html":{}}}],["explicitli",{"_index":310,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["export",{"_index":89,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["expos",{"_index":524,"title":{},"body":{"index.html":{}}}],["express",{"_index":592,"title":{},"body":{"license.html":{}}}],["extend",{"_index":467,"title":{},"body":{"classes/StompService.html":{}}}],["f8094ed53339",{"_index":455,"title":{},"body":{"classes/StompRService.html":{}}}],["factor",{"_index":742,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["fail",{"_index":730,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["failur",{"_index":849,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["fals",{"_index":284,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["few",{"_index":679,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["field",{"_index":308,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"license.html":{},"additional-documentation/how-to-contribute.html":{}}}],["filter",{"_index":137,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{}}}],["filter((currentst",{"_index":339,"title":{},"body":{"classes/StompRService.html":{}}}],["filter((head",{"_index":347,"title":{},"body":{"classes/StompRService.html":{}}}],["finnigan",{"_index":543,"title":{},"body":{"index.html":{}}}],["first",{"_index":138,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["fit",{"_index":595,"title":{},"body":{"license.html":{}}}],["follow",{"_index":583,"title":{},"body":{"license.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["fork",{"_index":783,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["form",{"_index":709,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["frame",{"_index":252,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["free",{"_index":564,"title":{},"body":{"license.html":{}}}],["frequent",{"_index":723,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["function",{"_index":79,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/sockjs-support.html":{}}}],["furnish",{"_index":582,"title":{},"body":{"license.html":{}}}],["further",{"_index":415,"title":{},"body":{"classes/StompRService.html":{}}}],["futur",{"_index":712,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["gener",{"_index":794,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["get",{"_index":293,"title":{"index.html":{},"license.html":{}},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["git",{"_index":773,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["github",{"_index":782,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["give",{"_index":688,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["good",{"_index":449,"title":{},"body":{"classes/StompRService.html":{}}}],["grant",{"_index":563,"title":{},"body":{"license.html":{}}}],["guest",{"_index":722,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["guid",{"_index":98,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/how-to-contribute.html":{}}}],["guide](../addit",{"_index":141,"title":{},"body":{"classes/StompRPCService.html":{}}}],["guidelin",{"_index":854,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["hack",{"_index":731,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["handl",{"_index":190,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["happen",{"_index":447,"title":{},"body":{"classes/StompRService.html":{}}}],["hash",{"_index":668,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["header",{"_index":15,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["headers).pipe(first",{"_index":161,"title":{},"body":{"classes/StompRPCService.html":{}}}],["headers['ack",{"_index":427,"title":{},"body":{"classes/StompRService.html":{}}}],["headers['correl",{"_index":178,"title":{},"body":{"classes/StompRPCService.html":{}}}],["headers['repli",{"_index":177,"title":{},"body":{"classes/StompRPCService.html":{}}}],["heart",{"_index":361,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/sockjs-support.html":{}}}],["heartbeat",{"_index":43,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["heartbeat_in",{"_index":16,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["heartbeat_out",{"_index":17,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["hello",{"_index":665,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["helper",{"_index":811,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["here",{"_index":640,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["herebi",{"_index":562,"title":{},"body":{"license.html":{}}}],["hold",{"_index":263,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["holder",{"_index":599,"title":{},"body":{"license.html":{}}}],["host",{"_index":38,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["host:str",{"_index":34,"title":{},"body":{"classes/StompConfig.html":{}}}],["hot",{"_index":444,"title":{},"body":{"classes/StompRService.html":{}}}],["http://karma",{"_index":764,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["https://compodoc.app",{"_index":760,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["https://en.wikipedia.org/wiki/websocket",{"_index":705,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["https://git",{"_index":776,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["https://github.com/stomp",{"_index":522,"title":{},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{}}}],["https://jasmine.github.io",{"_index":762,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["https://medium.com/@benlesh/hot",{"_index":452,"title":{},"body":{"classes/StompRService.html":{}}}],["https://nodejs.org",{"_index":770,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["https://stomp",{"_index":714,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["https://webpack.js.org",{"_index":768,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["https://www.npmjs.com",{"_index":772,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["https://www.rabbitmq.com/stomp.html#d.tqd",{"_index":656,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["https://www.rabbitmq.com/tutorials/tutori",{"_index":627,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["https://www.typescriptlang.org",{"_index":757,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["i.",{"_index":619,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["id",{"_index":173,"title":{},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["ideal",{"_index":681,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["identifi",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["ignor",{"_index":233,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["imag",{"_index":806,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["immedi",{"_index":231,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["implement",{"_index":115,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["impli",{"_index":593,"title":{},"body":{"license.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["includ",{"_index":527,"title":{},"body":{"index.html":{},"license.html":{}}}],["incom",{"_index":42,"title":{},"body":{"classes/StompConfig.html":{}}}],["incomingmessag",{"_index":645,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["inde",{"_index":411,"title":{},"body":{"classes/StompRService.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["index.d.t",{"_index":800,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["indic",{"_index":255,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["inform",{"_index":528,"title":{},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{}}}],["inherit",{"_index":470,"title":{},"body":{"classes/StompService.html":{}}}],["initandconnect",{"_index":210,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["initi",{"_index":226,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["initstompcli",{"_index":211,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["inject",{"_index":661,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["insid",{"_index":248,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["instal",{"_index":535,"title":{},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["instanc",{"_index":84,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"additional-documentation/sockjs-support.html":{}}}],["instead",{"_index":708,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["instruct",{"_index":778,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["intern",{"_index":261,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["interv",{"_index":44,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["introduct",{"_index":520,"title":{},"body":{"index.html":{}}}],["invok",{"_index":791,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["involv",{"_index":554,"title":{},"body":{"index.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["issu",{"_index":319,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["jasmin",{"_index":761,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["jasmine/karma",{"_index":810,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["jimi",{"_index":544,"title":{},"body":{"index.html":{}}}],["js.github.io/stomp",{"_index":715,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["js/ng2",{"_index":743,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["js/ng4",{"_index":700,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["js/stomp",{"_index":555,"title":{},"body":{"index.html":{}}}],["js/stompj",{"_index":523,"title":{},"body":{"index.html":{}}}],["karma",{"_index":763,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["karma.conf.j",{"_index":801,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["key",{"_index":30,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["kind",{"_index":591,"title":{},"body":{"license.html":{}}}],["know",{"_index":158,"title":{},"body":{"classes/StompRPCService.html":{}}}],["kumar",{"_index":548,"title":{},"body":{"index.html":{},"license.html":{}}}],["languag",{"_index":633,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["leav",{"_index":313,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["left",{"_index":437,"title":{},"body":{"classes/StompRService.html":{}}}],["lexic",{"_index":245,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["liabil",{"_index":603,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":600,"title":{},"body":{"license.html":{}}}],["librari",{"_index":193,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"additional-documentation/sockjs-support.html":{}}}],["licens",{"_index":556,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["license.md",{"_index":787,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["limit",{"_index":574,"title":{},"body":{"license.html":{},"additional-documentation/sockjs-support.html":{}}}],["list",{"_index":186,"title":{},"body":{"classes/StompRService.html":{}}}],["liter",{"_index":259,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["local",{"_index":264,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["localhost",{"_index":76,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/how-to-contribute.html":{}}}],["lock.json",{"_index":802,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["log",{"_index":538,"title":{"additional-documentation/change-log.html":{}},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{}}}],["log.md",{"_index":852,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["logic",{"_index":408,"title":{},"body":{"classes/StompRService.html":{}}}],["login",{"_index":31,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["long",{"_index":448,"title":{},"body":{"classes/StompRService.html":{}}}],["look",{"_index":657,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["magic",{"_index":432,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["make",{"_index":129,"title":{},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["manag",{"_index":771,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["mani",{"_index":685,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["manual",{"_index":492,"title":{},"body":{"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["match",{"_index":91,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}}}],["mean",{"_index":312,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["merchant",{"_index":594,"title":{},"body":{"license.html":{}}}],["merg",{"_index":577,"title":{},"body":{"license.html":{}}}],["messag",{"_index":110,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["message.bodi",{"_index":646,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["message.headers['correl",{"_index":172,"title":{},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["message.headers['repli",{"_index":642,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["messages.next(messag",{"_index":436,"title":{},"body":{"classes/StompRService.html":{}}}],["method",{"_index":118,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["michel",{"_index":551,"title":{},"body":{"index.html":{}}}],["millisecond",{"_index":45,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["miscellan",{"_index":509,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":317,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["mit",{"_index":557,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":576,"title":{},"body":{"license.html":{}}}],["modul",{"_index":609,"title":{"modules.html":{}},"body":{"modules.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["more",{"_index":531,"title":{},"body":{"index.html":{}}}],["mssage",{"_index":316,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["myrabbitmq",{"_index":827,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["myserviceendpoint",{"_index":636,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["name",{"_index":103,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["necessari",{"_index":825,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["need",{"_index":185,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["neeed",{"_index":35,"title":{},"body":{"classes/StompConfig.html":{}}}],["new",{"_index":85,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"coverage.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["next",{"_index":414,"title":{},"body":{"classes/StompRService.html":{}}}],["node",{"_index":780,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["node.j",{"_index":518,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":769,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["noninfring",{"_index":598,"title":{},"body":{"license.html":{}}}],["note",{"_index":242,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["noth",{"_index":390,"title":{},"body":{"classes/StompRService.html":{}}}],["notic",{"_index":586,"title":{},"body":{"license.html":{}}}],["notifi",{"_index":391,"title":{},"body":{"classes/StompRService.html":{}}}],["npm",{"_index":534,"title":{},"body":{"index.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["null",{"_index":348,"title":{},"body":{"classes/StompRService.html":{}}}],["number",{"_index":40,"title":{},"body":{"classes/StompConfig.html":{}}}],["object",{"_index":9,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["observ",{"_index":108,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{}}}],["observable.cr",{"_index":165,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{}}}],["obtain",{"_index":567,"title":{},"body":{"license.html":{}}}],["occasion",{"_index":729,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["occur",{"_index":229,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["old",{"_index":703,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["on",{"_index":159,"title":{},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["on_connect",{"_index":203,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["onc",{"_index":675,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["onconnect",{"_index":378,"title":{},"body":{"classes/StompRService.html":{}}}],["onstomperror",{"_index":380,"title":{},"body":{"classes/StompRService.html":{}}}],["onwebsocketclos",{"_index":382,"title":{},"body":{"classes/StompRService.html":{}}}],["oper",{"_index":325,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{}}}],["option",{"_index":99,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["orient",{"_index":515,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":285,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"license.html":{}}}],["out",{"_index":225,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"license.html":{},"additional-documentation/change-log.html":{}}}],["outgo",{"_index":51,"title":{},"body":{"classes/StompConfig.html":{}}}],["outgoingmessag",{"_index":647,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["outlin",{"_index":689,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["over",{"_index":355,"title":{},"body":{"classes/StompRService.html":{},"index.html":{}}}],["overview",{"_index":610,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":829,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["packag",{"_index":506,"title":{"dependencies.html":{}},"body":{"index.html":{},"additional-documentation/how-to-contribute.html":{}}}],["package.json",{"_index":803,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["page",{"_index":614,"title":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}},"body":{"additional-documentation/how-to-contribute.html":{}}}],["param",{"_index":394,"title":{},"body":{"classes/StompRService.html":{}}}],["paramet",{"_index":78,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["part",{"_index":430,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["particular",{"_index":596,"title":{},"body":{"license.html":{}}}],["pass",{"_index":36,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["passcod",{"_index":33,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["payload",{"_index":127,"title":{},"body":{"classes/StompRPCService.html":{}}}],["per",{"_index":816,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["permiss",{"_index":561,"title":{},"body":{"license.html":{}}}],["permit",{"_index":581,"title":{},"body":{"license.html":{}}}],["person",{"_index":566,"title":{},"body":{"license.html":{}}}],["pleas",{"_index":65,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["plugin",{"_index":818,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["portion",{"_index":589,"title":{},"body":{"license.html":{}}}],["possibl",{"_index":513,"title":{},"body":{"miscellaneous/enumerations.html":{},"additional-documentation/sockjs-support.html":{}}}],["preced",{"_index":354,"title":{},"body":{"classes/StompRService.html":{}}}],["preserv",{"_index":244,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["primari",{"_index":756,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["print",{"_index":371,"title":{},"body":{"classes/StompRService.html":{}}}],["privat",{"_index":146,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{}}}],["procedur",{"_index":144,"title":{"additional-documentation/remote-procedure-call-(rpc).html":{}},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["process",{"_index":643,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["program",{"_index":624,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["progress",{"_index":530,"title":{},"body":{"index.html":{}}}],["project",{"_index":785,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["promonet",{"_index":552,"title":{},"body":{"index.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["protect",{"_index":200,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["provid",{"_index":269,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"license.html":{},"additional-documentation/how-to-contribute.html":{}}}],["public",{"_index":119,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["publish",{"_index":212,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"license.html":{}}}],["publish(queuenam",{"_index":289,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["pull",{"_index":749,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["purpos",{"_index":597,"title":{},"body":{"license.html":{}}}],["python.html",{"_index":629,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["queu",{"_index":265,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["queue",{"_index":105,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["queue/rpc",{"_index":149,"title":{},"body":{"classes/StompRPCService.html":{}}}],["queuedmessag",{"_index":204,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["queuedmessage.head",{"_index":406,"title":{},"body":{"classes/StompRService.html":{}}}],["queuedmessage.messag",{"_index":405,"title":{},"body":{"classes/StompRService.html":{}}}],["queuenam",{"_index":294,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["r.servic",{"_index":112,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompService.html":{}}}],["r.service.t",{"_index":182,"title":{},"body":{"classes/StompRService.html":{},"coverage.html":{}}}],["r.service.ts:112",{"_index":328,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:117",{"_index":288,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:153",{"_index":287,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:182",{"_index":286,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:203",{"_index":282,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:217",{"_index":290,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:227",{"_index":295,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:256",{"_index":301,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:29",{"_index":275,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:320",{"_index":296,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:331",{"_index":299,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:342",{"_index":323,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:352",{"_index":240,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:357",{"_index":257,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:37",{"_index":221,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:46",{"_index":268,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:53",{"_index":250,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:58",{"_index":266,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:64",{"_index":280,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:69",{"_index":260,"title":{},"body":{"classes/StompRService.html":{}}}],["r.service.ts:79",{"_index":218,"title":{},"body":{"classes/StompRService.html":{}}}],["rabbitmq",{"_index":39,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["rais",{"_index":752,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["raw",{"_index":183,"title":{},"body":{"classes/StompRService.html":{}}}],["re",{"_index":416,"title":{},"body":{"classes/StompRService.html":{}}}],["re)connect",{"_index":228,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["read",{"_index":713,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["readm",{"_index":219,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["readme.md",{"_index":788,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["realli",{"_index":652,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["reason",{"_index":683,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["receipt",{"_index":267,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["receiptid",{"_index":326,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["receiptsobserv",{"_index":205,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["receiv",{"_index":297,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["recent",{"_index":270,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["reconnect",{"_index":60,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["reconnect_delay",{"_index":18,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["refer",{"_index":66,"title":{},"body":{"classes/StompConfig.html":{}}}],["regener",{"_index":853,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["relat",{"_index":324,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["releas",{"_index":707,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["remain",{"_index":422,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["remot",{"_index":143,"title":{"additional-documentation/remote-procedure-call-(rpc).html":{}},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["remov",{"_index":832,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["repli",{"_index":104,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["replyqueuenam",{"_index":100,"title":{},"body":{"classes/StompRPCConfig.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["replyto",{"_index":641,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["repres",{"_index":7,"title":{},"body":{"classes/StompConfig.html":{}}}],["request",{"_index":130,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["request).subscribe((messag",{"_index":670,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["request/respons",{"_index":620,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["requir",{"_index":680,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["respons",{"_index":273,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["restrict",{"_index":573,"title":{},"body":{"license.html":{}}}],["resubscrib",{"_index":306,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["result",{"_index":90,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}}}],["return",{"_index":80,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["right",{"_index":575,"title":{},"body":{"license.html":{}}}],["root",{"_index":796,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["rout",{"_index":621,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["rpc",{"_index":95,"title":{"additional-documentation/remote-procedure-call-(rpc).html":{}},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["rpc(serviceendpoint",{"_index":126,"title":{},"body":{"classes/StompRPCService.html":{}}}],["rpc.config",{"_index":140,"title":{},"body":{"classes/StompRPCService.html":{}}}],["rpc.config.t",{"_index":94,"title":{},"body":{"classes/StompRPCConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["rpc.config.ts:17",{"_index":102,"title":{},"body":{"classes/StompRPCConfig.html":{}}}],["rpc.config.ts:21",{"_index":107,"title":{},"body":{"classes/StompRPCConfig.html":{}}}],["rpc.service.t",{"_index":114,"title":{},"body":{"classes/StompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:20",{"_index":123,"title":{},"body":{"classes/StompRPCService.html":{}}}],["rpc.service.ts:39",{"_index":128,"title":{},"body":{"classes/StompRPCService.html":{}}}],["rpc.service.ts:47",{"_index":133,"title":{},"body":{"classes/StompRPCService.html":{}}}],["rpcobserv",{"_index":166,"title":{},"body":{"classes/StompRPCService.html":{}}}],["rpcobserver.next(messag",{"_index":175,"title":{},"body":{"classes/StompRPCService.html":{}}}],["run",{"_index":75,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["rune",{"_index":840,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["runner.github.io",{"_index":765,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["rxj",{"_index":109,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"index.html":{}}}],["rxjs/oper",{"_index":139,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{}}}],["safe",{"_index":232,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["sam",{"_index":542,"title":{},"body":{"index.html":{}}}],["same",{"_index":423,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/how-to-contribute.html":{}}}],["sampl",{"_index":220,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["saveimport",{"_index":718,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["scm.com",{"_index":777,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["scope",{"_index":246,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["script",{"_index":790,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["second",{"_index":54,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["secur",{"_index":682,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["see",{"_index":97,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["sell",{"_index":580,"title":{},"body":{"license.html":{}}}],["send",{"_index":176,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["sendqueuedmessag",{"_index":213,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["sent",{"_index":639,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["separ",{"_index":536,"title":{},"body":{"index.html":{}}}],["serv",{"_index":839,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["server",{"_index":64,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["serverheadersobserv",{"_index":206,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["servic",{"_index":116,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["serviceendpoint",{"_index":131,"title":{},"body":{"classes/StompRPCService.html":{}}}],["set",{"_index":46,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["setconfig(valu",{"_index":327,"title":{},"body":{"classes/StompRService.html":{}}}],["setup",{"_index":74,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}}}],["setuponrec",{"_index":214,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["setupreceipt",{"_index":215,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["setupreplyqueu",{"_index":101,"title":{},"body":{"classes/StompRPCConfig.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["setupreplyqueuefntyp",{"_index":106,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["shall",{"_index":587,"title":{},"body":{"license.html":{}}}],["share",{"_index":329,"title":{},"body":{"classes/StompRService.html":{}}}],["show",{"_index":278,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["signatur",{"_index":243,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["similar",{"_index":81,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["simpl",{"_index":419,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["simpli",{"_index":694,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["simplifi",{"_index":687,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["singl",{"_index":678,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["six",{"_index":628,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["socketfn",{"_index":356,"title":{},"body":{"classes/StompRService.html":{}}}],["socketprovid",{"_index":710,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["sockj",{"_index":83,"title":{"additional-documentation/sockjs-support.html":{}},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["sockjs('http://127.0.0.1:15674/stomp",{"_index":86,"title":{},"body":{"classes/StompConfig.html":{},"additional-documentation/sockjs-support.html":{}}}],["softwar",{"_index":569,"title":{},"body":{"license.html":{}}}],["soon",{"_index":292,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["spec",{"_index":807,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["spec/helpers/stomp.service.factory.t",{"_index":815,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["special",{"_index":424,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["specif",{"_index":196,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["src",{"_index":797,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["src/.../stomp",{"_index":511,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/chang",{"_index":851,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["src/sockjs.md.html",{"_index":717,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["src/spec",{"_index":844,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["src/stomp",{"_index":93,"title":{},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/stomp.config.t",{"_index":5,"title":{},"body":{"classes/StompConfig.html":{},"coverage.html":{}}}],["src/stomp.config.ts:22",{"_index":63,"title":{},"body":{"classes/StompConfig.html":{}}}],["src/stomp.config.ts:29",{"_index":28,"title":{},"body":{"classes/StompConfig.html":{}}}],["src/stomp.config.ts:36",{"_index":41,"title":{},"body":{"classes/StompConfig.html":{}}}],["src/stomp.config.ts:44",{"_index":50,"title":{},"body":{"classes/StompConfig.html":{}}}],["src/stomp.config.ts:52",{"_index":55,"title":{},"body":{"classes/StompConfig.html":{}}}],["src/stomp.config.ts:55",{"_index":24,"title":{},"body":{"classes/StompConfig.html":{}}}],["src/stomp.service.t",{"_index":466,"title":{},"body":{"classes/StompService.html":{},"coverage.html":{}}}],["src/stomp.service.ts:17",{"_index":469,"title":{},"body":{"classes/StompService.html":{}}}],["start",{"_index":514,"title":{"index.html":{},"license.html":{}},"body":{"additional-documentation/how-to-contribute.html":{}}}],["state",{"_index":207,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["state.t",{"_index":512,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statement",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["statu",{"_index":277,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["step",{"_index":698,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stomp",{"_index":67,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"additional-documentation/how-to-contribute.html":{}}}],["stomp.client(this._config.url",{"_index":359,"title":{},"body":{"classes/StompRService.html":{}}}],["stomp.config",{"_index":330,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["stomp.j",{"_index":192,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{}}}],["stomp.over(this._config.url",{"_index":360,"title":{},"body":{"classes/StompRService.html":{}}}],["stomp/stomp.j",{"_index":184,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["stomp/stompj",{"_index":88,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"dependencies.html":{}}}],["stompconfig",{"_index":1,"title":{"classes/StompConfig.html":{}},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"additional-documentation/sockjs-support.html":{}}}],["stompconnectedsubscript",{"_index":434,"title":{},"body":{"classes/StompRService.html":{}}}],["stompconnectedsubscription.unsubscrib",{"_index":440,"title":{},"body":{"classes/StompRService.html":{}}}],["stomperror",{"_index":208,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["stomphead",{"_index":27,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["stompj",{"_index":701,"title":{},"body":{"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{}}}],["stomprpcconfig",{"_index":92,"title":{"classes/StompRPCConfig.html":{}},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"coverage.html":{}}}],["stomprpcconfig.replyqueuenam",{"_index":154,"title":{},"body":{"classes/StompRPCService.html":{}}}],["stomprpcconfig.setupreplyqueu",{"_index":156,"title":{},"body":{"classes/StompRPCService.html":{}}}],["stomprpcconfigforactivemq",{"_index":690,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stomprpcservic",{"_index":113,"title":{"classes/StompRPCService.html":{}},"body":{"classes/StompRPCService.html":{},"coverage.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stomprpcservice.rpc(myserviceendpoint",{"_index":669,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stomprservic",{"_index":111,"title":{"classes/StompRService.html":{}},"body":{"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stomprservice:117",{"_index":484,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:153",{"_index":483,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:182",{"_index":482,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:203",{"_index":481,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:217",{"_index":485,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:227",{"_index":486,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:256",{"_index":489,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:29",{"_index":479,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:320",{"_index":487,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:331",{"_index":488,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:342",{"_index":490,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:352",{"_index":473,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:357",{"_index":475,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:37",{"_index":472,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:46",{"_index":478,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:53",{"_index":474,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:58",{"_index":477,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:64",{"_index":480,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:69",{"_index":476,"title":{},"body":{"classes/StompService.html":{}}}],["stomprservice:79",{"_index":471,"title":{},"body":{"classes/StompService.html":{}}}],["stompservic",{"_index":10,"title":{"classes/StompService.html":{}},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stompservice.publish(replyto",{"_index":649,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stompservice.subscribe(myserviceendpoint).subscribe((messag",{"_index":638,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stompservice.subscribe(replyqueuenam",{"_index":695,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stompstat",{"_index":332,"title":{},"body":{"classes/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate.connect",{"_index":235,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["stompsubscript",{"_index":331,"title":{},"body":{"classes/StompRService.html":{}}}],["stompsubscription.unsubscrib",{"_index":441,"title":{},"body":{"classes/StompRService.html":{}}}],["stream",{"_index":120,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["stream(serviceendpoint",{"_index":132,"title":{},"body":{"classes/StompRPCService.html":{}}}],["streamlin",{"_index":711,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["string",{"_index":32,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["structur",{"_index":786,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["subject",{"_index":249,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"license.html":{}}}],["sublicens",{"_index":578,"title":{},"body":{"license.html":{}}}],["submit",{"_index":748,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["subscrib",{"_index":191,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["subscribe((messag",{"_index":174,"title":{},"body":{"classes/StompRPCService.html":{}}}],["subscribe(queuenam",{"_index":300,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["subscript",{"_index":136,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{}}}],["substanti",{"_index":588,"title":{},"body":{"license.html":{}}}],["successfulli",{"_index":258,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["summari",{"_index":754,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["super",{"_index":493,"title":{},"body":{"classes/StompService.html":{}}}],["support",{"_index":650,"title":{"additional-documentation/sockjs-support.html":{}},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["switch",{"_index":704,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["system",{"_index":745,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["t",{"_index":826,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["tabl",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":353,"title":{},"body":{"classes/StompRService.html":{}}}],["task",{"_index":792,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["tell",{"_index":821,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["temp",{"_index":148,"title":{},"body":{"classes/StompRPCService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["temporari",{"_index":315,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["termin",{"_index":677,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["test",{"_index":734,"title":{},"body":{"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["text",{"_index":820,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["thing",{"_index":651,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["third",{"_index":667,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["this._changestate(stompstate.clos",{"_index":383,"title":{},"body":{"classes/StompRService.html":{}}}],["this._changestate(stompstate.connect",{"_index":256,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["this._changestate(stompstate.disconnect",{"_index":392,"title":{},"body":{"classes/StompRService.html":{}}}],["this._changestate(stompstate.tri",{"_index":386,"title":{},"body":{"classes/StompRService.html":{}}}],["this._config",{"_index":351,"title":{},"body":{"classes/StompRService.html":{}}}],["this._config.debug",{"_index":369,"title":{},"body":{"classes/StompRService.html":{}}}],["this._config.head",{"_index":376,"title":{},"body":{"classes/StompRService.html":{}}}],["this._config.heartbeat_in",{"_index":364,"title":{},"body":{"classes/StompRService.html":{}}}],["this._config.heartbeat_out",{"_index":366,"title":{},"body":{"classes/StompRService.html":{}}}],["this._config.reconnect_delay",{"_index":368,"title":{},"body":{"classes/StompRService.html":{}}}],["this._repliesobserv",{"_index":162,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this._repliesobservable.pipe(filter((messag",{"_index":171,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this._replyqueuenam",{"_index":155,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this._serverheadersbehavioursubject",{"_index":343,"title":{},"body":{"classes/StompRService.html":{}}}],["this._serverheadersbehavioursubject.next(frame.head",{"_index":254,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["this._serverheadersbehavioursubject.pip",{"_index":346,"title":{},"body":{"classes/StompRService.html":{}}}],["this._setupreplyqueu",{"_index":157,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this._setupreplyqueue(this._replyqueuenam",{"_index":163,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this.client",{"_index":358,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.activ",{"_index":385,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.configur",{"_index":377,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.connect",{"_index":389,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.deactiv",{"_index":388,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.debug",{"_index":372,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.heartbeatincom",{"_index":363,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.heartbeatoutgo",{"_index":365,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.onunhandledmessag",{"_index":458,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.onunhandledreceipt",{"_index":461,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.publish({destin",{"_index":396,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.reconnectdelay",{"_index":367,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.subscribe(queuenam",{"_index":435,"title":{},"body":{"classes/StompRService.html":{}}}],["this.client.watchforreceipt(receiptid",{"_index":463,"title":{},"body":{"classes/StompRService.html":{}}}],["this.config",{"_index":494,"title":{},"body":{"classes/StompService.html":{}}}],["this.connect",{"_index":395,"title":{},"body":{"classes/StompRService.html":{}}}],["this.connectobserv",{"_index":337,"title":{},"body":{"classes/StompRService.html":{}}}],["this.connectobservable.subscrib",{"_index":341,"title":{},"body":{"classes/StompRService.html":{}}}],["this.debug",{"_index":370,"title":{},"body":{"classes/StompRService.html":{}}}],["this.debug('connect",{"_index":253,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["this.debug(`attempt",{"_index":403,"title":{},"body":{"classes/StompRService.html":{}}}],["this.debug(`not",{"_index":398,"title":{},"body":{"classes/StompRService.html":{}}}],["this.debug(`request",{"_index":425,"title":{},"body":{"classes/StompRService.html":{}}}],["this.debug(`stomp",{"_index":442,"title":{},"body":{"classes/StompRService.html":{}}}],["this.debug(`stop",{"_index":438,"title":{},"body":{"classes/StompRService.html":{}}}],["this.debug(`wil",{"_index":401,"title":{},"body":{"classes/StompRService.html":{}}}],["this.defaultmessagesobserv",{"_index":457,"title":{},"body":{"classes/StompRService.html":{}}}],["this.defaultmessagesobservable.next(messag",{"_index":459,"title":{},"body":{"classes/StompRService.html":{}}}],["this.disconnect",{"_index":352,"title":{},"body":{"classes/StompRService.html":{}}}],["this.initandconnect",{"_index":495,"title":{},"body":{"classes/StompService.html":{}}}],["this.initstompcli",{"_index":375,"title":{},"body":{"classes/StompRService.html":{}}}],["this.on_connect",{"_index":379,"title":{},"body":{"classes/StompRService.html":{}}}],["this.publish(queuedmessage.queuenam",{"_index":404,"title":{},"body":{"classes/StompRService.html":{}}}],["this.queuedmessag",{"_index":400,"title":{},"body":{"classes/StompRService.html":{}}}],["this.queuedmessages.push({queuenam",{"_index":399,"title":{},"body":{"classes/StompRService.html":{}}}],["this.receiptsobserv",{"_index":460,"title":{},"body":{"classes/StompRService.html":{}}}],["this.receiptsobservable.next(fram",{"_index":462,"title":{},"body":{"classes/StompRService.html":{}}}],["this.sendqueuedmessag",{"_index":342,"title":{},"body":{"classes/StompRService.html":{}}}],["this.serverheadersobserv",{"_index":345,"title":{},"body":{"classes/StompRService.html":{}}}],["this.setuponrec",{"_index":373,"title":{},"body":{"classes/StompRService.html":{}}}],["this.setupreceipt",{"_index":374,"title":{},"body":{"classes/StompRService.html":{}}}],["this.stat",{"_index":335,"title":{},"body":{"classes/StompRService.html":{}}}],["this.state.getvalu",{"_index":393,"title":{},"body":{"classes/StompRService.html":{}}}],["this.state.next(st",{"_index":465,"title":{},"body":{"classes/StompRService.html":{}}}],["this.state.pip",{"_index":338,"title":{},"body":{"classes/StompRService.html":{}}}],["this.stomperror",{"_index":349,"title":{},"body":{"classes/StompRService.html":{}}}],["this.stomperror$.next(fram",{"_index":381,"title":{},"body":{"classes/StompRService.html":{}}}],["this.stompservic",{"_index":164,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this.stompservice.defaultmessagesobserv",{"_index":151,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this.stompservice.publish(serviceendpoint",{"_index":179,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this.stream(serviceendpoint",{"_index":160,"title":{},"body":{"classes/StompRPCService.html":{}}}],["this.x",{"_index":247,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["those",{"_index":728,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["though",{"_index":720,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["three",{"_index":836,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["time",{"_index":227,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["togeth",{"_index":846,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["tool",{"_index":755,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["topic/echo",{"_index":637,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["topic/replies.${uuid.uuid",{"_index":693,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["tort",{"_index":607,"title":{},"body":{"license.html":{}}}],["travi",{"_index":746,"title":{},"body":{"additional-documentation/change-log.html":{}}}],["treat",{"_index":819,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["tri",{"_index":402,"title":{},"body":{"classes/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["trigger",{"_index":222,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["true",{"_index":283,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["tsc",{"_index":835,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["tsconfig.json",{"_index":812,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["turn",{"_index":662,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["twice",{"_index":446,"title":{},"body":{"classes/StompRService.html":{}}}],["two",{"_index":617,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":611,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof(this._config.url",{"_index":357,"title":{},"body":{"classes/StompRService.html":{}}}],["typescript",{"_index":526,"title":{},"body":{"index.html":{},"additional-documentation/how-to-contribute.html":{}}}],["typic",{"_index":29,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["umd",{"_index":838,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["unclear",{"_index":855,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["underli",{"_index":304,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"additional-documentation/sockjs-support.html":{}}}],["understand",{"_index":311,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{}}}],["unexpect",{"_index":848,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["uniqu",{"_index":626,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["unit",{"_index":733,"title":{},"body":{"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["unless",{"_index":187,"title":{},"body":{"classes/StompRService.html":{}}}],["unsubscrib",{"_index":433,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["up",{"_index":779,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["updat",{"_index":850,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["url",{"_index":19,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"additional-documentation/sockjs-support.html":{}}}],["us",{"_index":117,"title":{},"body":{"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"license.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/how-to-contribute.html":{}}}],["usag",{"_index":699,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["user",{"_index":189,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["usual",{"_index":615,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{}}}],["uuid",{"_index":134,"title":{},"body":{"classes/StompRPCService.html":{},"dependencies.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["uuid.uuid",{"_index":170,"title":{},"body":{"classes/StompRPCService.html":{}}}],["valu",{"_index":49,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRPCService.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["variabl",{"_index":429,"title":{},"body":{"classes/StompRService.html":{}}}],["variant",{"_index":837,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["veri",{"_index":630,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["version",{"_index":774,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["via",{"_index":194,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["virtual",{"_index":37,"title":{},"body":{"classes/StompConfig.html":{}}}],["visit",{"_index":539,"title":{},"body":{"index.html":{}}}],["void",{"_index":237,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["vs",{"_index":453,"title":{},"body":{"classes/StompRService.html":{}}}],["wait",{"_index":56,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/sockjs-support.html":{}}}],["waitforreceipt",{"_index":216,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["waitforreceipt(receiptid",{"_index":322,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["want",{"_index":491,"title":{},"body":{"classes/StompService.html":{},"index.html":{}}}],["warranti",{"_index":590,"title":{},"body":{"license.html":{}}}],["watch",{"_index":439,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/how-to-contribute.html":{}}}],["way",{"_index":320,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["web",{"_index":516,"title":{},"body":{"index.html":{}}}],["web_stomp.ws_fram",{"_index":823,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["webpack",{"_index":766,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["webpack.config.jssetup",{"_index":813,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["websocket",{"_index":82,"title":{},"body":{"classes/StompConfig.html":{},"index.html":{},"additional-documentation/sockjs-support.html":{}}}],["websocket/codo/extra/doc",{"_index":716,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["webstomp",{"_index":817,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["well",{"_index":407,"title":{},"body":{"classes/StompRService.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{}}}],["whenev",{"_index":417,"title":{},"body":{"classes/StompRService.html":{}}}],["whether",{"_index":604,"title":{},"body":{"license.html":{}}}],["wire",{"_index":198,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{}}}],["without",{"_index":572,"title":{},"body":{"license.html":{}}}],["wonder",{"_index":412,"title":{},"body":{"classes/StompRService.html":{}}}],["work",{"_index":314,"title":{},"body":{"classes/StompRService.html":{},"classes/StompService.html":{},"index.html":{},"additional-documentation/remote-procedure-call-(rpc).html":{},"additional-documentation/sockjs-support.html":{},"additional-documentation/change-log.html":{},"additional-documentation/how-to-contribute.html":{}}}],["workflow",{"_index":842,"title":{},"body":{"additional-documentation/how-to-contribute.html":{}}}],["worri",{"_index":721,"title":{},"body":{"additional-documentation/sockjs-support.html":{}}}],["wrapper",{"_index":521,"title":{},"body":{"index.html":{}}}],["ws://127.0.0.1:15674/w",{"_index":72,"title":{},"body":{"classes/StompConfig.html":{}}}],["ye",{"_index":125,"title":{},"body":{"classes/StompRPCService.html":{}}}],["yield",{"_index":674,"title":{},"body":{"additional-documentation/remote-procedure-call-(rpc).html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp.config.ts\n        \n\n            \n                Description\n            \n            \n                Represents a configuration object for the\nSTOMPService to connect to.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                headers\n                            \n                            \n                                heartbeat_in\n                            \n                            \n                                heartbeat_out\n                            \n                            \n                                reconnect_delay\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:55\n                            \n                        \n\n                \n                    \n                        Enable client debugging? \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            headers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        headers:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:29\n                            \n                        \n\n                \n                    \n                        Headers\nTypical keys: login: string, passcode: string.\nhost:string will neeed to be passed for virtual hosts in RabbitMQ\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            heartbeat_in\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeat_in:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:36\n                            \n                        \n\n                \n                    \n                        How often to incoming heartbeat?\nInterval in milliseconds, set to 0 to disable\nTypical value 0 - disabled\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            heartbeat_out\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeat_out:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:44\n                            \n                        \n\n                \n                    \n                        How often to outgoing heartbeat?\nInterval in milliseconds, set to 0 to disable\nTypical value 20000 - every 20 seconds\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reconnect_delay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnect_delay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:52\n                            \n                        \n\n                \n                    \n                        Wait in milliseconds before attempting auto reconnect\nSet to 0 to disable\nTypical value 5000 (5 seconds)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        url:     string | \n\n                    \n                \n                    \n                        \n                            Type :     string | \n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:22\n                            \n                        \n\n                \n                    \n                        Server URL to connect to. Please refer to your STOMP broker documentation for details.\nExample: ws://127.0.0.1:15674/ws (for a RabbitMQ default setup running on localhost)\nAlternatively this parameter can be a function that returns an object similar to WebSocket\n(typically SockJS instance).\nExample:\n() => {\n   return new SockJS('http://127.0.0.1:15674/stomp');\n}\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompHeaders } from \"@stomp/stompjs\";\n/**\n * Represents a configuration object for the\n * STOMPService to connect to.\n */\n\nexport class StompConfig {\n  /**\n   * Server URL to connect to. Please refer to your STOMP broker documentation for details.\n   *\n   * Example: ws://127.0.0.1:15674/ws (for a RabbitMQ default setup running on localhost)\n   *\n   * Alternatively this parameter can be a function that returns an object similar to WebSocket\n   * (typically SockJS instance).\n   *\n   * Example:\n   *\n   * () => {\n   *   return new SockJS('http://127.0.0.1:15674/stomp');\n   * }\n   */\n  url: string | (() => any);\n\n  /**\n   * Headers\n   * Typical keys: login: string, passcode: string.\n   * host:string will neeed to be passed for virtual hosts in RabbitMQ\n   */\n  headers: StompHeaders;\n\n  /** How often to incoming heartbeat?\n   * Interval in milliseconds, set to 0 to disable\n   *\n   * Typical value 0 - disabled\n   */\n  heartbeat_in: number;\n\n  /**\n   * How often to outgoing heartbeat?\n   * Interval in milliseconds, set to 0 to disable\n   *\n   * Typical value 20000 - every 20 seconds\n   */\n  heartbeat_out: number;\n\n  /**\n   * Wait in milliseconds before attempting auto reconnect\n   * Set to 0 to disable\n   *\n   * Typical value 5000 (5 seconds)\n   */\n  reconnect_delay: number;\n\n  /** Enable client debugging? */\n  debug: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompRPCConfig.html":{"url":"classes/StompRPCConfig.html","title":"class - StompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp-rpc.config.ts\n        \n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            replyQueueName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        replyQueueName:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-rpc.config.ts:17\n                            \n                        \n\n                \n                    \n                        Name of the reply queue\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            setupReplyQueue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setupReplyQueue:     setupReplyQueueFnType\n\n                    \n                \n                    \n                        \n                            Type :     setupReplyQueueFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-rpc.config.ts:21\n                            \n                        \n\n                \n                    \n                        Setup the reply queue\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { Message } from \"@stomp/stompjs\";\nimport {StompRService} from \"./stomp-r.service\";\n\n/**\n * See the guide for example\n */\nexport type setupReplyQueueFnType = (replyQueueName: string, stompService: StompRService) => Observable;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class StompRPCConfig {\n  /**\n   * Name of the reply queue\n   */\n  replyQueueName?: string;\n  /**\n   * Setup the reply queue\n   */\n  setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompRPCService.html":{"url":"classes/StompRPCService.html","title":"class - StompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp-rpc.service.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of RPC service using messaging.\nPlease see the guide for details.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stompService: StompRService, stompRPCConfig?: StompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in src/stomp-rpc.service.ts:20\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stompService\n                                                  \n                                                        \n                                                                    StompRService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                    StompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rpc\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        rpc(serviceEndPoint: string, payload: string, headers?: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-rpc.service.ts:39\n                            \n                        \n\n\n                \n                    \n                            Make an RPC request. See the guide for example.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceEndPoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        payload\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stream\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stream(serviceEndPoint: string, payload: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-rpc.service.ts:47\n                            \n                        \n\n\n                \n                    \n                            Make an RPC stream request. See the guide.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        serviceEndPoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        payload\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Message, StompHeaders} from '@stomp/stompjs';\nimport {UUID} from 'angular2-uuid';\nimport {Observable, Observer, Subscription} from \"rxjs\";\nimport {filter, first} from \"rxjs/operators\";\nimport {StompRService} from \"./stomp-r.service\";\nimport {setupReplyQueueFnType, StompRPCConfig} from \"./stomp-rpc.config\";\n\n/**\n * An implementation of RPC service using messaging.\n *\n * Please see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n */\nexport class StompRPCService {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.stompService.defaultMessagesObservable;\n  };\n\n  private _repliesObservable: Observable;\n\n  /**\n   * Create an instance, see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n   */\n  constructor(private stompService: StompRService, private stompRPCConfig?: StompRPCConfig) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html) for example.\n   */\n  public rpc(serviceEndPoint: string, payload: string, headers?: StompHeaders): Observable {\n    // We know there will be only one message in reply\n    return this.stream(serviceEndPoint, payload, headers).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html).\n   */\n  public stream(serviceEndPoint: string, payload: string, headers: StompHeaders = {}) {\n    if (!this._repliesObservable) {\n      this._repliesObservable = this._setupReplyQueue(this._replyQueueName, this.stompService);\n    }\n\n    return Observable.create(\n      (rpcObserver: Observer) => {\n        let defaultMessagesSubscription: Subscription;\n\n        const correlationId = UUID.UUID();\n\n        defaultMessagesSubscription = this._repliesObservable.pipe(filter((message: Message) => {\n          return message.headers['correlation-id'] === correlationId;\n        })).subscribe((message: Message) => {\n          rpcObserver.next(message);\n        });\n\n        // send an RPC request\n        headers['reply-to'] = this._replyQueueName;\n        headers['correlation-id'] = correlationId;\n\n        this.stompService.publish(serviceEndPoint, payload, headers);\n\n        return () => { // Cleanup\n          defaultMessagesSubscription.unsubscribe();\n        };\n      }\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompRService.html":{"url":"classes/StompRService.html","title":"class - StompRService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompRService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp-r.service.ts\n        \n\n            \n                Description\n            \n            \n                Angular2 STOMP Raw Service using @stomp/stomp.js\nYou will only need the public properties and\nmethods listed unless you are an advanced user. This service handles subscribing to a\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you will like to pass the configuration as a dependency,\nplease use StompService class.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                client\n                            \n                            \n                                    Public\n                                connectObservable\n                            \n                            \n                                    Protected\n                                debug\n                            \n                            \n                                    Public\n                                defaultMessagesObservable\n                            \n                            \n                                    Protected\n                                on_connect\n                            \n                            \n                                    Protected\n                                queuedMessages\n                            \n                            \n                                    Public\n                                receiptsObservable\n                            \n                            \n                                    Public\n                                serverHeadersObservable\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                stompError$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Protected\n                                initStompClient\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Protected\n                                sendQueuedMessages\n                            \n                            \n                                    Protected\n                                setupOnReceive\n                            \n                            \n                                    Protected\n                                setupReceipts\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/stomp-r.service.ts:79\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            client\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        client:     Client\n\n                    \n                \n                    \n                        \n                            Type :     Client\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:79\n                            \n                        \n\n                \n                    \n                        STOMP Client from @stomp/stomp.js\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connectObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectObservable:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:37\n                            \n                        \n\n                \n                    \n                        Will trigger when connection is established. Use this to carry out initialization.\nIt will trigger every time a (re)connection occurs. If it is already connected\nit will trigger immediately. You can safely ignore the value, as it will always be\nStompState.CONNECTED\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     \n\n                    \n                \n                    \n                        \n                            Default value : (args: any): void => {\n    console.log(new Date(), args);\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:352\n                            \n                        \n\n                \n                    \n                        Callback Functions\nNote the method signature: () => preserves lexical scope\nif we need to use this.x inside the function\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            defaultMessagesObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        defaultMessagesObservable:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:53\n                            \n                        \n\n                \n                    \n                        Will emit all messages to the default queue (any message that are not handled by a subscription)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            on_connect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        on_connect:     \n\n                    \n                \n                    \n                        \n                            Default value : (frame: Frame) => {\n\n    this.debug('Connected');\n\n    this._serverHeadersBehaviourSubject.next(frame.headers);\n\n    // Indicate our connected state to observers\n    this._changeState(StompState.CONNECTED);\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:357\n                            \n                        \n\n                \n                    \n                        Callback run on successfully connecting to server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            queuedMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        queuedMessages:     literal type[]\n\n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:69\n                            \n                        \n\n                \n                    \n                        Internal array to hold locally queued messages when STOMP broker is not connected.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            receiptsObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        receiptsObservable:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:58\n                            \n                        \n\n                \n                    \n                        Will emit all receipts\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            serverHeadersObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        serverHeadersObservable:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:46\n                            \n                        \n\n                \n                    \n                        Provides headers from most recent connection to the server as return by the CONNECTED\nframe.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will additionally trigger in event of reconnection, the value will be set of headers from\nthe recent server response.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        state:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:29\n                            \n                        \n\n                \n                    \n                        State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stompError$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompError$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:64\n                            \n                        \n\n                \n                    \n                        Will trigger when an error occurs. This Subject can be used to handle errors from\nthe stomp broker.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        connected()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:203\n                            \n                        \n\n\n                \n                    \n                            It will return true if STOMP broker is connected and false otherwise.\n\n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        disconnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:182\n                            \n                        \n\n\n                \n                    \n                            It will disconnect from the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initAndConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initAndConnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:153\n                            \n                        \n\n\n                \n                    \n                            It will connect to the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initStompClient\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initStompClient()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:117\n                            \n                        \n\n\n                \n                    \n                            It will initialize STOMP Client. \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(queueName: string, message: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:217\n                            \n                        \n\n\n                \n                    \n                            It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        message\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            sendQueuedMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        sendQueuedMessages()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:227\n                            \n                        \n\n\n                \n                    \n                            It will send queued messages. \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            setupOnReceive\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setupOnReceive()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:320\n                            \n                        \n\n\n                \n                    \n                            It will handle messages received in the default queue. Messages that would not be handled otherwise\nget delivered to the default queue.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            setupReceipts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setupReceipts()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:331\n                            \n                        \n\n\n                \n                    \n                            It will emit all receipts.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(queueName: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:256\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, mssages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            waitForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:342\n                            \n                        \n\n\n                \n                    \n                            Wait for receipt, this indicates that server has carried out the related operation\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(value: )\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:112\n                                \n                            \n                    \n                        \n                                Set configuration \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import {filter, first, share} from 'rxjs/operators';\nimport {BehaviorSubject, Observable, Observer, Subject, Subscription} from 'rxjs';\n\nimport {StompConfig} from './stomp.config';\n\nimport {Client, Frame, Message, Stomp, StompHeaders, StompSubscription} from '@stomp/stompjs';\nimport {StompState} from './stomp-state';\n\n/**\n * Angular2 STOMP Raw Service using @stomp/stomp.js\n *\n * You will only need the public properties and\n * methods listed unless you are an advanced user. This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you will like to pass the configuration as a dependency,\n * please use StompService class.\n */\nexport class StompRService {\n  /**\n   * State of the STOMPService\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public state: BehaviorSubject;\n\n  /**\n   * Will trigger when connection is established. Use this to carry out initialization.\n   * It will trigger every time a (re)connection occurs. If it is already connected\n   * it will trigger immediately. You can safely ignore the value, as it will always be\n   * StompState.CONNECTED\n   */\n  public connectObservable: Observable;\n\n  /**\n   * Provides headers from most recent connection to the server as return by the CONNECTED\n   * frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will additionally trigger in event of reconnection, the value will be set of headers from\n   * the recent server response.\n   */\n  public serverHeadersObservable: Observable;\n\n  private _serverHeadersBehaviourSubject: BehaviorSubject;\n\n  /**\n   * Will emit all messages to the default queue (any message that are not handled by a subscription)\n   */\n  public defaultMessagesObservable: Subject;\n\n  /**\n   * Will emit all receipts\n   */\n  public receiptsObservable: Subject;\n\n  /**\n   * Will trigger when an error occurs. This Subject can be used to handle errors from\n   * the stomp broker.\n   */\n  public stompError$: Subject;\n\n  /**\n   * Internal array to hold locally queued messages when STOMP broker is not connected.\n   */\n  protected queuedMessages: { queueName: string, message: string, headers: StompHeaders }[] = [];\n\n  /**\n   * Configuration\n   */\n  private _config: StompConfig;\n\n  /**\n   * STOMP Client from @stomp/stomp.js\n   */\n  protected client: Client;\n\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor() {\n    this.state = new BehaviorSubject(StompState.CLOSED);\n\n    this.connectObservable = this.state.pipe(\n      filter((currentState: StompState) => {\n        return currentState === StompState.CONNECTED;\n      })\n    );\n\n    // Setup sending queuedMessages\n    this.connectObservable.subscribe(() => {\n      this.sendQueuedMessages();\n    });\n\n    this._serverHeadersBehaviourSubject = new BehaviorSubject(null);\n\n    this.serverHeadersObservable = this._serverHeadersBehaviourSubject.pipe(\n      filter((headers: null | StompHeaders) => {\n        return headers !== null;\n      })\n    );\n\n    this.stompError$ = new Subject();\n  }\n\n  /** Set configuration */\n  set config(value: StompConfig) {\n    this._config = value;\n  }\n\n  /** It will initialize STOMP Client. */\n  protected initStompClient(): void {\n    // disconnect if connected\n    this.disconnect();\n\n    // url takes precedence over socketFn\n    if (typeof(this._config.url) === 'string') {\n      this.client = Stomp.client(this._config.url);\n    } else {\n      this.client = Stomp.over(this._config.url);\n    }\n\n    // Configure client heart-beating\n    this.client.heartbeatIncoming = this._config.heartbeat_in;\n    this.client.heartbeatOutgoing = this._config.heartbeat_out;\n\n    // Auto reconnect\n    this.client.reconnectDelay = this._config.reconnect_delay;\n\n    if (!this._config.debug) {\n      this.debug = function () {\n      };\n    }\n    // Set function to debug print messages\n    this.client.debug = this.debug;\n\n    // Default messages\n    this.setupOnReceive();\n\n    // Receipts\n    this.setupReceipts();\n  }\n\n\n  /**\n   * It will connect to the STOMP broker.\n   */\n  public initAndConnect(): void {\n    this.initStompClient();\n\n    if (!this._config.headers) {\n      this._config.headers = {};\n    }\n\n    this.client.configure({\n      onConnect: this.on_connect,\n      onStompError: (frame: Frame) => {\n        // Trigger the frame subject\n        this.stompError$.next(frame);\n      },\n      onWebSocketClose: () => {\n        this._changeState(StompState.CLOSED);\n      },\n      connectHeaders: this._config.headers\n    });\n    // Attempt connection, passing in a callback\n    this.client.activate();\n\n    this.debug('Connecting...');\n    this._changeState(StompState.TRYING);\n  }\n\n\n  /**\n   * It will disconnect from the STOMP broker.\n   */\n  public disconnect(): void {\n\n    // Disconnect if connected. Callback will set CLOSED state\n    if (this.client) {\n\n      this.client.deactivate();\n\n      if (!this.client.connected) {\n        // Nothing to do\n        this._changeState(StompState.CLOSED);\n        return;\n      }\n\n      // Notify observers that we are disconnecting!\n      this._changeState(StompState.DISCONNECTING);\n    }\n  }\n\n  /**\n   * It will return `true` if STOMP broker is connected and `false` otherwise.\n   */\n  public connected(): boolean {\n    return this.state.getValue() === StompState.CONNECTED;\n  }\n\n  /**\n   * It will send a message to a named destination. The message must be `string`.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * @param queueName\n   * @param message\n   * @param headers\n   */\n  public publish(queueName: string, message: string, headers: StompHeaders = {}): void {\n    if (this.connected()) {\n      this.client.publish({destination: queueName, headers: headers, body: message});\n    } else {\n      this.debug(`Not connected, queueing ${message}`);\n      this.queuedMessages.push({queueName: queueName, message: message, headers: headers});\n    }\n  }\n\n  /** It will send queued messages. */\n  protected sendQueuedMessages(): void {\n    const queuedMessages = this.queuedMessages;\n    this.queuedMessages = [];\n\n    this.debug(`Will try sending queued messages ${queuedMessages}`);\n\n    for (const queuedMessage of queuedMessages) {\n      this.debug(`Attempting to send ${queuedMessage}`);\n      this.publish(queuedMessage.queueName, queuedMessage.message, queuedMessage.headers);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * If a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\n   * do not understand what it means, please leave it as is.\n   *\n   * Note that when working with temporary queues where the subscription request\n   * creates the\n   * underlying queue, mssages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * @param queueName\n   * @param headers\n   */\n  public subscribe(queueName: string, headers: StompHeaders = {}): Observable {\n\n    /* Well the logic is complicated but works beautifully. RxJS is indeed wonderful.\n     *\n     * We need to activate the underlying subscription immediately if Stomp is connected. If not it should\n     * subscribe when it gets next connected. Further it should re establish the subscription whenever Stomp\n     * successfully reconnects.\n     *\n     * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n     * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n     *\n     * The observable that we return to caller remains same across all reconnects, so no special handling needed at\n     * the message subscriber.\n     */\n    this.debug(`Request to subscribe ${queueName}`);\n\n    // By default auto acknowledgement of messages\n    if (!headers['ack']) {\n      headers['ack'] = 'auto';\n    }\n\n    const coldObservable = Observable.create(\n      (messages: Observer) => {\n        /*\n         * These variables will be used as part of the closure and work their magic during unsubscribe\n         */\n        let stompSubscription: StompSubscription;\n\n        let stompConnectedSubscription: Subscription;\n\n        stompConnectedSubscription = this.connectObservable\n          .subscribe(() => {\n            this.debug(`Will subscribe to ${queueName}`);\n            stompSubscription = this.client.subscribe(queueName, (message: Message) => {\n                messages.next(message);\n              },\n              headers);\n          });\n\n        return () => { /* cleanup function, will be called when no subscribers are left */\n          this.debug(`Stop watching connection state (for ${queueName})`);\n          stompConnectedSubscription.unsubscribe();\n\n          if (this.state.getValue() === StompState.CONNECTED) {\n            this.debug(`Will unsubscribe from ${queueName} at Stomp`);\n            stompSubscription.unsubscribe();\n          } else {\n            this.debug(`Stomp not connected, no need to unsubscribe from ${queueName} at Stomp`);\n          }\n        };\n      });\n\n    /**\n     * Important - convert it to hot Observable - otherwise, if the user code subscribes\n     * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n     * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n     */\n    return coldObservable.pipe(share());\n  }\n\n  /**\n   * It will handle messages received in the default queue. Messages that would not be handled otherwise\n   * get delivered to the default queue.\n   */\n  protected setupOnReceive(): void {\n    this.defaultMessagesObservable = new Subject();\n\n    this.client.onUnhandledMessage = (message: Message) => {\n      this.defaultMessagesObservable.next(message);\n    };\n  }\n\n  /**\n   * It will emit all receipts.\n   */\n  protected setupReceipts(): void {\n    this.receiptsObservable = new Subject();\n\n    this.client.onUnhandledReceipt = (frame: Frame) => {\n      this.receiptsObservable.next(frame);\n    };\n  }\n\n  /**\n   * Wait for receipt, this indicates that server has carried out the related operation\n   */\n  public waitForReceipt(receiptId: string, callback: (frame: Frame) => void): void {\n    this.client.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Callback Functions\n   *\n   * Note the method signature: () => preserves lexical scope\n   * if we need to use this.x inside the function\n   */\n  protected debug = (args: any): void => {\n    console.log(new Date(), args);\n  }\n\n  /** Callback run on successfully connecting to server */\n  protected on_connect = (frame: Frame) => {\n\n    this.debug('Connected');\n\n    this._serverHeadersBehaviourSubject.next(frame.headers);\n\n    // Indicate our connected state to observers\n    this._changeState(StompState.CONNECTED);\n  }\n\n  private _changeState(state: StompState): void {\n    this.state.next(state);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompService.html":{"url":"classes/StompService.html","title":"class - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Angular2 STOMP Service using @stomp/stomp.js\n\n            \n\n            \n                Extends\n            \n            \n                    StompRService\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                client\n                            \n                            \n                                    Public\n                                connectObservable\n                            \n                            \n                                    Protected\n                                debug\n                            \n                            \n                                    Public\n                                defaultMessagesObservable\n                            \n                            \n                                    Protected\n                                on_connect\n                            \n                            \n                                    Protected\n                                queuedMessages\n                            \n                            \n                                    Public\n                                receiptsObservable\n                            \n                            \n                                    Public\n                                serverHeadersObservable\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                stompError$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Protected\n                                initStompClient\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Protected\n                                sendQueuedMessages\n                            \n                            \n                                    Protected\n                                setupOnReceive\n                            \n                            \n                                    Protected\n                                setupReceipts\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in src/stomp.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            client\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        client:     Client\n\n                    \n                \n                    \n                        \n                            Type :     Client\n\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:79\n                            \n                        \n\n                \n                    \n                        STOMP Client from @stomp/stomp.js\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connectObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectObservable:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:37\n                            \n                        \n\n                \n                    \n                        Will trigger when connection is established. Use this to carry out initialization.\nIt will trigger every time a (re)connection occurs. If it is already connected\nit will trigger immediately. You can safely ignore the value, as it will always be\nStompState.CONNECTED\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     \n\n                    \n                \n                    \n                        \n                            Default value : (args: any): void => {\n    console.log(new Date(), args);\n  }\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:352\n                            \n                        \n\n                \n                    \n                        Callback Functions\nNote the method signature: () => preserves lexical scope\nif we need to use this.x inside the function\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            defaultMessagesObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        defaultMessagesObservable:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:53\n                            \n                        \n\n                \n                    \n                        Will emit all messages to the default queue (any message that are not handled by a subscription)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            on_connect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        on_connect:     \n\n                    \n                \n                    \n                        \n                            Default value : (frame: Frame) => {\n\n    this.debug('Connected');\n\n    this._serverHeadersBehaviourSubject.next(frame.headers);\n\n    // Indicate our connected state to observers\n    this._changeState(StompState.CONNECTED);\n  }\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:357\n                            \n                        \n\n                \n                    \n                        Callback run on successfully connecting to server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            queuedMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        queuedMessages:     literal type[]\n\n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:69\n                            \n                        \n\n                \n                    \n                        Internal array to hold locally queued messages when STOMP broker is not connected.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            receiptsObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        receiptsObservable:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:58\n                            \n                        \n\n                \n                    \n                        Will emit all receipts\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            serverHeadersObservable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        serverHeadersObservable:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:46\n                            \n                        \n\n                \n                    \n                        Provides headers from most recent connection to the server as return by the CONNECTED\nframe.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will additionally trigger in event of reconnection, the value will be set of headers from\nthe recent server response.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        state:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:29\n                            \n                        \n\n                \n                    \n                        State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stompError$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompError$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:64\n                            \n                        \n\n                \n                    \n                        Will trigger when an error occurs. This Subject can be used to handle errors from\nthe stomp broker.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        connected()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:203\n                            \n                        \n\n\n                \n                    \n                            It will return true if STOMP broker is connected and false otherwise.\n\n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        disconnect()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:182\n                            \n                        \n\n\n                \n                    \n                            It will disconnect from the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initAndConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initAndConnect()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:153\n                            \n                        \n\n\n                \n                    \n                            It will connect to the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initStompClient\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initStompClient()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:117\n                            \n                        \n\n\n                \n                    \n                            It will initialize STOMP Client. \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(queueName: string, message: string, headers: StompHeaders)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:217\n                            \n                        \n\n\n                \n                    \n                            It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        message\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            sendQueuedMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        sendQueuedMessages()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:227\n                            \n                        \n\n\n                \n                    \n                            It will send queued messages. \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            setupOnReceive\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setupOnReceive()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:320\n                            \n                        \n\n\n                \n                    \n                            It will handle messages received in the default queue. Messages that would not be handled otherwise\nget delivered to the default queue.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            setupReceipts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setupReceipts()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:331\n                            \n                        \n\n\n                \n                    \n                            It will emit all receipts.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(queueName: string, headers: StompHeaders)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:256\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, mssages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            waitForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     StompRService\n\n                                \n                            \n                        \n                            \n                                    Defined in StompRService:342\n                            \n                        \n\n\n                \n                    \n                            Wait for receipt, this indicates that server has carried out the related operation\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\nexport class StompService extends StompRService {\n\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/stomp-r.service.ts\n            \n            \n                class\n            \n            \n                StompRService\n            \n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/stomp-rpc.config.ts\n            \n            \n                class\n            \n            \n                StompRPCConfig\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/stomp-rpc.service.ts\n            \n            \n                class\n            \n            \n                StompRPCService\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/stomp.config.ts\n            \n            \n                class\n            \n            \n                StompConfig\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/stomp.service.ts\n            \n            \n                class\n            \n            \n                StompService\n            \n            \n                100 %\n                (22/22)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @stomp/stompjs : ^5.0.0\n        \n            angular2-uuid : ^1.1.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StompState   (src/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Possible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSTOMP.js\n\nThis library provides a RxJS oriented STOMP over WebSocket client for Web browser or node.js\napplications.\nIntroduction\nThis is a wrapper over https://github.com/stomp-js/stompjs.\nIt exposes the STOMP operations as RxJS Observables.\nIt provides almost all operations provided by the underlying library.\nThis has been developed using TypeScript and includes typing information in the distribution.\nWork in Progress\nMore to come :)\nTypeScript definitions\nThe npm package includes TypeScript definitions, so there is no need no install it separately.\nChange log\nPlease visit Change Log.\nContributing\nIf you want to understand the code, develop, or contribute. Please visit\nHow to contribute. \nAuthors\n\nSam Finnigan\nJimi (Dimitris) Charalampidis\nDeepak Kumar\nAstha Deep\nMichel Promonet\nEveryone involved at https://github.com/stomp-js/stomp-websocket\nand https://github.com/stomp-js/stompjs\n\nLicense\nLicense - MIT License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright (c) 2018 Deepak Kumar\nMIT License\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            setupReplyQueueFnType   (src/.../stomp-rpc.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/stomp-rpc.config.ts\n    \n        \n            \n                \n                    \n                        \n                        setupReplyQueueFnType\n                    \n                \n                    \n                        \n                            See the guide for example\n\n                        \n                    \n                \n                    \n                        setupReplyQueueFnType:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/remote-procedure-call-(rpc).html":{"url":"additional-documentation/remote-procedure-call-(rpc).html","title":"additional-page - Remote Procedure Call (RPC)","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRPC - Remote Procedure Call\nMessaging usually works one way.\nThere is however a convention for two way communication (i.e. request/response).\nThis involves reply-to queues which routes the response back to correct client program\nand correlation-id to uniquely match a response to the correct request.\nSee: https://www.rabbitmq.com/tutorials/tutorial-six-python.html for a sample using\na very similar approach.\nImplementing the RPC server endpoint\nThis can be implemented in any language, in most cases it will be there in some backend server.\n    const myServiceEndPoint = '/topic/echo';\n\n    stompService.subscribe(myServiceEndPoint).subscribe((message: Message) => {\n      // The response needs to be sent back here\n      const replyTo = message.headers['reply-to'];\n\n      // Same correlation id needs to be sent back as message header\n      const correlationId = message.headers['correlation-id'];\n\n      // Process the request, compute the response\n      const incomingMessage = message.body;\n\n      const outgoingMessage = 'Echoing - ' + incomingMessage;\n\n      // Send the response back to destination `replyTo` with `correlation-id` header\n      stompService.publish(replyTo, outgoingMessage, {'correlation-id' : correlationId});\n    });Using it from the client\nRabbitMQ\nRabbitMQ has special support for temp-queues in reply-to messages\nwhich make things to work magically. Really I mean it.\nIf you don't believe me check details at https://www.rabbitmq.com/stomp.html#d.tqd\nWell the client code looks equally simple and similar to what you would expect\nto use with any backend service.\nThe StompRPCService can be created by means of Angular Dependency Injection\nor be created manually.\nIt in turns needs an initialized StompRService as\na dependency (or argument).\nStompService is a derived class of StompRService, so that will work as well.\n    const myServiceEndPoint = '/topic/echo';\n\n    const request = 'Hello';\n    // It accepts a optional third argument a Hash of headers to be sent as part of the request\n    stompRPCService.rpc(myServiceEndPoint, request).subscribe((message: Message) => {\n      // Consume the response\n      console.log(message.body);\n    });Just like Ajax requests, it will yield only once.\nThere is another method called stream that will not terminate after one response.\nThis can be used to receive stream of responses for a single request.\nIf you use that it will be your responsibility to unsubscribe when you do not expect\nany additional messages.\nOther Brokers\nThere are few requirements:\n\nthe reply queue name must be unique across the broker.\nideally, for security reasons only the client creating the queue should have access to it.\n\nMany brokers have temp-queue concept which should simplify your work. \nFollowing gives and outline:\n  const stompRPCConfigForActiveMQ = {\n    // A unique name, BTW angular2-uuid module is already added as dependency\n    replyQueueName: `/topic/replies.${UUID.UUID()}`,\n\n    // Simply subscribe, you would need to secure by adding broker specific options\n    setupReplyQueue: (replyQueueName: string, stompService: StompRService) => {\n      return stompService.subscribe(replyQueueName);\n    }\n  };This custom config would need to be passed as second parameter in StompRPCService\nconstructor, or, can be passed as an Angular Dependency.\nApart from this additional setup step usage remains same as RabbitMQ case as documented above.\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/sockjs-support.html":{"url":"additional-documentation/sockjs-support.html","title":"additional-page - SockJS Support","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing with SockJS\nSee sample at https://github.com/stomp-js/ng4-stompjs-demo/tree/sockjs\nAlmost all brokers that support SockJS also support WebSockets.\nIf your application does not need to support old browsers, switch to using WebSockets.\nCheck https://en.wikipedia.org/wiki/WebSocket for compatibility information.\nNotes\n\nIt is an initial release.\nInstead of a url in the default form, you need \nto pass it as a socketProvider function. It will be streamlined in a\nfuture release.\nPlease read notes on SockJS support of the underlying library at\nhttps://stomp-js.github.io/stomp-websocket/codo/extra/docs-src/sockjs.md.html\n\nUsage\nInstall SockJS Client\n$ npm install sockjs-client --saveImport SockJS class\nimport * as SockJS from 'sockjs-client';Implement a socketProvider\nCreate a function that returns an object similar to WebSocket (typically SockJS instance).\nexport function socketProvider() {\n  return new SockJS('http://127.0.0.1:15674/stomp');\n}StompConfig\nPass the function as url in StompConfig.\n It will work even\nthough name of the parameter is url, don't worry :)\nExample:\nconst stompConfig: StompConfig = {\n  // Which server?\n  url: socketProvider,\n\n  // Headers\n  // Typical keys: login, passcode, host\n  headers: {\n    login: 'guest',\n    passcode: 'guest'\n  },\n\n  // How frequent is the heartbeat?\n  // Interval in milliseconds, set to 0 to disable\n  heartbeat_in: 0, // Typical value 0 - disabled\n  heartbeat_out: 20000, // Typical value 20000 - every 20 seconds\n\n  // Wait in milliseconds before attempting auto reconnect\n  // Set to 0 to disable\n  // Typical value 5000 (5 seconds)\n  reconnect_delay: 5000,\n\n  // Will log diagnostics on console\n  debug: true\n};Limitations\nCopied from https://stomp-js.github.io/stomp-websocket/codo/extra/docs-src/sockjs.md.html\n\nSockJS is an emulation of WebSockets. This is not a complete implementation.\nHeart beating is not supported.\nSockJS internally uses one of many possible means to communicate. In some of those, auto reconnect may occasionally fail.\n\nWhen Hacking Code of this Library\n\nWhen developing on this library code to use SockJS, please adjust the unit tests to use\nSockJS.\nUnit testes may occasionally fail in SockJS. It is because of limitations\nof SockJS around allowing only one SockJS connection at a time. Usually \nthis should not affect your usage of the library.\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/change-log.html":{"url":"additional-documentation/change-log.html","title":"additional-page - Change Log","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange Log\n0.1.0-beta.1 (2018-10-13)\n\nFactored out from https://github.com/stomp-js/ng2-stompjs\nBuild/test/doc systems are working\nTravis is setup\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/how-to-contribute.html":{"url":"additional-documentation/how-to-contribute.html","title":"additional-page - How to Contribute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContributing\nHow to contribute\n\nFile issues.\nEdit/write documentation.\nSubmit pull requests.\nTest in different environments.\nRaise awareness.\n\nSummary of tools\nFollowing tools are getting used:\n\nTypeScript as primary language - https://www.typescriptlang.org/\ncompodoc for API documentation - https://compodoc.app/\nJasmine for test cases - https://jasmine.github.io/\nKarma for running test cases in browsers - http://karma-runner.github.io/\nwebpack for build - https://webpack.js.org/\nnodejs during development - https://nodejs.org/\nnpm for dependency management, packaging and distribution - https://www.npmjs.com/\ngit for version control - https://git-scm.com/\n\nInitial setup\nInstructions on setting up development environment:\n\nInstall node and npm - https://nodejs.org/\nCheckout code from GitHub - you may fork the code first into your GitHub account.\nUse npm i to install dependencies:  $ npm i\n\nProject structure\n\n├── LICENSE.md\n├── README.md\n├── bin/                     -- Scripts invoked from `npm` tasks\n├── bundles/                 -- Generated code browsers\n├── docs/                    -- Generated docs, root for GitHub pages\n├── docs-src/                -- Source for guides\n├── esm5/                    -- Generated ES5 modules\n├── index.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── rabbitmq/\n│   └── Dockerfile           -- This builds a docker image that is used to run test cases\n├── spec/                    -- These test cases run both for nodejs (using just Jasmine) and Chrome (Jasmine/Karma)\n│   ├── helpers/\n│   └── unit/                -- Test cases using Jasmine\n├── src/                     -- Typescript sources\n├── tsconfig.json\n└── webpack.config.jsSetup a Stomp broker\n\nA Stomp broker is used for running the tests. I have been using RabbitMQ.\nEdit spec/helpers/stomp.service.factory.ts as per\nyour setup. Defaults should work for as RabbitMQ default setup on localhost.\nPlease note that in RabbitMQ you will need to enable Stomp and WebStomp plugins.\nBy default RabbitMQ WebStomp will treat messages a text, you will need to tell\nit is use binary frames:  $ echo 'web_stomp.ws_frame = binary' >> /etc/rabbitmq/rabbitmq.conf\nA RabbitMQ Dockerfile is provided with necessary plugins and configuration. To use it, run:  $ docker build -t myrabbitmq rabbitmq/ # Needed only once\n  $ docker run -d -p 15674:15674 myrabbitmq # to start the broker\n\nBuilding and testing\nKey npm tasks:\nclean - Remove generated built artifacts\nbuild-tsc - Internally used by `npm run build`\nbuild-webpack - Internally used by `npm run build`\nbuild - Build three variants - ES5, ES6, and UMD\ndoc - Generate docs\ndoc-serve - Generate docs and watch for changes\nkarma - Rune test in browsersBasic development workflow\n\nCheckout a new branch.\nMake code changes (src/specs)\nBuild: $ npm run build\nRun tests:\nTo run tests using nodejs:  $ npm run test\nTo run tests using Chrome:  $ npm run karma\nCaution: As both browser and nodejs use same set of test cases and same queue\nnames. So, running both together may cause unexpected failures.\n\n\nUpdate documentation - do update the docs-src/Change-log.md\nRegenerate documentation: $ npm run doc\nPlease follow GitHub guidelines. Raise an issue if you are unclear.\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
